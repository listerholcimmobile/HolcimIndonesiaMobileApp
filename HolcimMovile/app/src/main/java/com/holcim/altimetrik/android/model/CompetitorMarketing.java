package com.holcim.altimetrik.android.model;

import com.holcim.altimetrik.android.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import org.json.JSONObject;
import com.holcim.altimetrik.android.utilities.HolcimConsts;
import org.json.JSONException;
import com.holcim.altimetrik.android.exception.HolcimException;
import java.io.Serializable;
// KEEP INCLUDES END
/**
 * Entity mapped to table COMPETITOR_MARKETING.
 */
public class CompetitorMarketing implements Serializable {

    private Long id;
    private String salesforceId;
    private String program;
    private String programStartDate;
    private String programEndDate;
    private String promotion;
    private String promotionStartDate;
    private String promotionEndDate;
    private String experienceLeadCompetitors;
    private String reasonBuyingLeadCompetitors;
    private Double competitorMarginHIL;
    private Double buyingPrice;
    private Double sellingPrice;
    private String competitorName;
    private Integer inventory;
    private String issue;
    private Boolean isEdited;
    private Integer lastMonthCompetitorBuyingVolume;
    private String otherReason;
    private String reasonForUnsatisfiedExperience;
    private long saleExecutionId;
    private long competitorId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CompetitorMarketingDao myDao;

    private SaleExecution saleExecution;
    private Long saleExecution__resolvedKey;

    private Competitor competitor;
    private Long competitor__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    /**
	 * 
	 */
	private static final long serialVersionUID = 3550762900283981729L;
    // KEEP FIELDS END

    public CompetitorMarketing() {
    }

    public CompetitorMarketing(Long id) {
        this.id = id;
    }

    public CompetitorMarketing(Long id, String salesforceId, String program, String programStartDate, String programEndDate, String promotion, String promotionStartDate, String promotionEndDate, String experienceLeadCompetitors, String reasonBuyingLeadCompetitors, Double competitorMarginHIL, Double buyingPrice, Double sellingPrice, String competitorName, Integer inventory, String issue, Boolean isEdited, Integer lastMonthCompetitorBuyingVolume, String otherReason, String reasonForUnsatisfiedExperience, long saleExecutionId, long competitorId) {
        this.id = id;
        this.salesforceId = salesforceId;
        this.program = program;
        this.programStartDate = programStartDate;
        this.programEndDate = programEndDate;
        this.promotion = promotion;
        this.promotionStartDate = promotionStartDate;
        this.promotionEndDate = promotionEndDate;
        this.experienceLeadCompetitors = experienceLeadCompetitors;
        this.reasonBuyingLeadCompetitors = reasonBuyingLeadCompetitors;
        this.competitorMarginHIL = competitorMarginHIL;
        this.buyingPrice = buyingPrice;
        this.sellingPrice = sellingPrice;
        this.competitorName = competitorName;
        this.inventory = inventory;
        this.issue = issue;
        this.isEdited = isEdited;
        this.lastMonthCompetitorBuyingVolume = lastMonthCompetitorBuyingVolume;
        this.otherReason = otherReason;
        this.reasonForUnsatisfiedExperience = reasonForUnsatisfiedExperience;
        this.saleExecutionId = saleExecutionId;
        this.competitorId = competitorId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCompetitorMarketingDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSalesforceId() {
        return salesforceId;
    }

    public void setSalesforceId(String salesforceId) {
        this.salesforceId = salesforceId;
    }

    public String getProgram() {
        return program;
    }

    public void setProgram(String program) {
        this.program = program;
    }

    public String getProgramStartDate() {
        return programStartDate;
    }

    public void setProgramStartDate(String programStartDate) {
        this.programStartDate = programStartDate;
    }

    public String getProgramEndDate() {
        return programEndDate;
    }

    public void setProgramEndDate(String programEndDate) {
        this.programEndDate = programEndDate;
    }

    public String getPromotion() {
        return promotion;
    }

    public void setPromotion(String promotion) {
        this.promotion = promotion;
    }

    public String getPromotionStartDate() {
        return promotionStartDate;
    }

    public void setPromotionStartDate(String promotionStartDate) {
        this.promotionStartDate = promotionStartDate;
    }

    public String getPromotionEndDate() {
        return promotionEndDate;
    }

    public void setPromotionEndDate(String promotionEndDate) {
        this.promotionEndDate = promotionEndDate;
    }

    public String getExperienceLeadCompetitors() {
        return experienceLeadCompetitors;
    }

    public void setExperienceLeadCompetitors(String experienceLeadCompetitors) {
        this.experienceLeadCompetitors = experienceLeadCompetitors;
    }

    public String getReasonBuyingLeadCompetitors() {
        return reasonBuyingLeadCompetitors;
    }

    public void setReasonBuyingLeadCompetitors(String reasonBuyingLeadCompetitors) {
        this.reasonBuyingLeadCompetitors = reasonBuyingLeadCompetitors;
    }

    public Double getCompetitorMarginHIL() {
        return competitorMarginHIL;
    }

    public void setCompetitorMarginHIL(Double competitorMarginHIL) {
        this.competitorMarginHIL = competitorMarginHIL;
    }

    public Double getBuyingPrice() {
        return buyingPrice;
    }

    public void setBuyingPrice(Double buyingPrice) {
        this.buyingPrice = buyingPrice;
    }

    public Double getSellingPrice() {
        return sellingPrice;
    }

    public void setSellingPrice(Double sellingPrice) {
        this.sellingPrice = sellingPrice;
    }

    public String getCompetitorName() {
        return competitorName;
    }

    public void setCompetitorName(String competitorName) {
        this.competitorName = competitorName;
    }

    public Integer getInventory() {
        return inventory;
    }

    public void setInventory(Integer inventory) {
        this.inventory = inventory;
    }

    public String getIssue() {
        return issue;
    }

    public void setIssue(String issue) {
        this.issue = issue;
    }

    public Boolean getIsEdited() {
        return isEdited;
    }

    public void setIsEdited(Boolean isEdited) {
        this.isEdited = isEdited;
    }

    public Integer getLastMonthCompetitorBuyingVolume() {
        return lastMonthCompetitorBuyingVolume;
    }

    public void setLastMonthCompetitorBuyingVolume(Integer lastMonthCompetitorBuyingVolume) {
        this.lastMonthCompetitorBuyingVolume = lastMonthCompetitorBuyingVolume;
    }

    public String getOtherReason() {
        return otherReason;
    }

    public void setOtherReason(String otherReason) {
        this.otherReason = otherReason;
    }

    public String getReasonForUnsatisfiedExperience() {
        return reasonForUnsatisfiedExperience;
    }

    public void setReasonForUnsatisfiedExperience(String reasonForUnsatisfiedExperience) {
        this.reasonForUnsatisfiedExperience = reasonForUnsatisfiedExperience;
    }

    public long getSaleExecutionId() {
        return saleExecutionId;
    }

    public void setSaleExecutionId(long saleExecutionId) {
        this.saleExecutionId = saleExecutionId;
    }

    public long getCompetitorId() {
        return competitorId;
    }

    public void setCompetitorId(long competitorId) {
        this.competitorId = competitorId;
    }

    /** To-one relationship, resolved on first access. */
    public SaleExecution getSaleExecution() {
        long __key = this.saleExecutionId;
        if (saleExecution__resolvedKey == null || !saleExecution__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleExecutionDao targetDao = daoSession.getSaleExecutionDao();
            SaleExecution saleExecutionNew = targetDao.load(__key);
            synchronized (this) {
                saleExecution = saleExecutionNew;
            	saleExecution__resolvedKey = __key;
            }
        }
        return saleExecution;
    }

    public void setSaleExecution(SaleExecution saleExecution) {
        if (saleExecution == null) {
            throw new DaoException("To-one property 'saleExecutionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saleExecution = saleExecution;
            saleExecutionId = saleExecution.getId();
            saleExecution__resolvedKey = saleExecutionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Competitor getCompetitor() {
        long __key = this.competitorId;
        if (competitor__resolvedKey == null || !competitor__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CompetitorDao targetDao = daoSession.getCompetitorDao();
            Competitor competitorNew = targetDao.load(__key);
            synchronized (this) {
                competitor = competitorNew;
            	competitor__resolvedKey = __key;
            }
        }
        return competitor;
    }

    public void setCompetitor(Competitor competitor) {
        if (competitor == null) {
            throw new DaoException("To-one property 'competitorId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.competitor = competitor;
            competitorId = competitor.getId();
            competitor__resolvedKey = competitorId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    
    public JSONObject toJSON() throws HolcimException {
    	try {
			JSONObject jsonObj = new JSONObject();
			jsonObj.putOpt("salesforceId", this.salesforceId);
			jsonObj.putOpt("buyingPrice", this.buyingPrice);
			if (this.getCompetitor() != null) {
				jsonObj.putOpt("competitor", this.getCompetitor().getSalesforceId());
			}
			jsonObj.putOpt("competitorMarginHIL", this.competitorMarginHIL);
			jsonObj.putOpt("competitorName", this.competitorName);
			jsonObj.putOpt("experienceLeadCompetitors", this.experienceLeadCompetitors);
			jsonObj.putOpt("inventory", this.inventory);
			jsonObj.putOpt("issue", this.issue);
			jsonObj.putOpt("lastMonthCompetitorBuyingVolume", this.lastMonthCompetitorBuyingVolume);
			jsonObj.putOpt("otherReason", this.otherReason);
			jsonObj.putOpt("program", this.program);
			jsonObj.putOpt("programEndDate", this.programEndDate);
			jsonObj.putOpt("programStartDate", this.programStartDate);
			jsonObj.putOpt("promotion", this.promotion);
			jsonObj.putOpt("promotionEndDate", this.promotionEndDate);
			jsonObj.putOpt("promotionStartDate", this.promotionStartDate);
			jsonObj.putOpt("reasonBuyingLeadCompetitors", this.reasonBuyingLeadCompetitors);	
			jsonObj.putOpt("reasonForUnsatisfiedExperience", this.reasonForUnsatisfiedExperience);			
			jsonObj.putOpt("sellingPrice", this.sellingPrice);
			if (this.getSaleExecution() != null) {
				jsonObj.putOpt("saleExecution", this.getSaleExecution().getSalesforceId());
			} 
			
			return jsonObj;
    	} catch (JSONException e) {
			throw new HolcimException(HolcimException.PARSE_EXCEPTION, HolcimConsts.ERROR_PARSING_JSON_STATUS, e.getMessage());
		}
    }
    // KEEP METHODS END

}
