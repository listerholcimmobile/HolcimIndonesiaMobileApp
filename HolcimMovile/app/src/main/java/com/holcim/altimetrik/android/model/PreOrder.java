package com.holcim.altimetrik.android.model;

import com.holcim.altimetrik.android.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import org.json.JSONObject;
import com.holcim.altimetrik.android.utilities.HolcimConsts;
import org.json.JSONException;
import com.holcim.altimetrik.android.exception.HolcimException;
import java.io.Serializable;
// KEEP INCLUDES END
/**
 * Entity mapped to table PRE_ORDER.
 */
public class PreOrder implements Serializable {

    private Long id;
    private String preOrderDate;
    private String salesforceId;
    private Double preOrderQuantity;
    private String product;
    private String unit;
    private String reasonForNotOrdering;
    private Boolean isEdited;
    private long saleExecutionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PreOrderDao myDao;

    private SaleExecution saleExecution;
    private Long saleExecution__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    /**
	 * 
	 */
	private static final long serialVersionUID = 3645745856285583172L;
    // KEEP FIELDS END

    public PreOrder() {
    }

    public PreOrder(Long id) {
        this.id = id;
    }

    public PreOrder(Long id, String preOrderDate, String salesforceId, Double preOrderQuantity, String product, String unit, String reasonForNotOrdering, Boolean isEdited, long saleExecutionId) {
        this.id = id;
        this.preOrderDate = preOrderDate;
        this.salesforceId = salesforceId;
        this.preOrderQuantity = preOrderQuantity;
        this.product = product;
        this.unit = unit;
        this.reasonForNotOrdering = reasonForNotOrdering;
        this.isEdited = isEdited;
        this.saleExecutionId = saleExecutionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPreOrderDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPreOrderDate() {
        return preOrderDate;
    }

    public void setPreOrderDate(String preOrderDate) {
        this.preOrderDate = preOrderDate;
    }

    public String getSalesforceId() {
        return salesforceId;
    }

    public void setSalesforceId(String salesforceId) {
        this.salesforceId = salesforceId;
    }

    public Double getPreOrderQuantity() {
        return preOrderQuantity;
    }

    public void setPreOrderQuantity(Double preOrderQuantity) {
        this.preOrderQuantity = preOrderQuantity;
    }

    public String getProduct() {
        return product;
    }

    public void setProduct(String product) {
        this.product = product;
    }

    public String getUnit() {
        return unit;
    }

    public void setUnit(String unit) {
        this.unit = unit;
    }

    public String getReasonForNotOrdering() {
        return reasonForNotOrdering;
    }

    public void setReasonForNotOrdering(String reasonForNotOrdering) {
        this.reasonForNotOrdering = reasonForNotOrdering;
    }

    public Boolean getIsEdited() {
        return isEdited;
    }

    public void setIsEdited(Boolean isEdited) {
        this.isEdited = isEdited;
    }

    public long getSaleExecutionId() {
        return saleExecutionId;
    }

    public void setSaleExecutionId(long saleExecutionId) {
        this.saleExecutionId = saleExecutionId;
    }

    /** To-one relationship, resolved on first access. */
    public SaleExecution getSaleExecution() {
        long __key = this.saleExecutionId;
        if (saleExecution__resolvedKey == null || !saleExecution__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleExecutionDao targetDao = daoSession.getSaleExecutionDao();
            SaleExecution saleExecutionNew = targetDao.load(__key);
            synchronized (this) {
                saleExecution = saleExecutionNew;
            	saleExecution__resolvedKey = __key;
            }
        }
        return saleExecution;
    }

    public void setSaleExecution(SaleExecution saleExecution) {
        if (saleExecution == null) {
            throw new DaoException("To-one property 'saleExecutionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saleExecution = saleExecution;
            saleExecutionId = saleExecution.getId();
            saleExecution__resolvedKey = saleExecutionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    
    public JSONObject toJSON() throws HolcimException {
    	try {
			JSONObject jsonObj = new JSONObject();
			jsonObj.putOpt("salesforceId", this.salesforceId);
			jsonObj.putOpt("preOrderDate", this.preOrderDate);
			jsonObj.putOpt("preOrderVolume", this.preOrderQuantity);
			jsonObj.putOpt("product", this.product);
			jsonObj.putOpt("reasonForNotOrdering", this.reasonForNotOrdering);
			jsonObj.putOpt("unit", this.unit);
			if (this.getSaleExecution() != null) {
				jsonObj.putOpt("saleExecution", this.getSaleExecution().getSalesforceId());
			}
			
			return jsonObj;
    	} catch (JSONException e) {
			throw new HolcimException(HolcimException.PARSE_EXCEPTION, HolcimConsts.ERROR_PARSING_JSON_STATUS, e.getMessage());
		}
    }
    // KEEP METHODS END

}
