package com.holcim.altimetrik.android.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.holcim.altimetrik.android.model.TeleSale;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TELE_SALE.
*/
public class TeleSaleDao extends AbstractDao<TeleSale, Long> {

    public static final String TABLENAME = "TELE_SALE";

    /**
     * Properties of entity TeleSale.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PreOrderDate = new Property(1, String.class, "preOrderDate", false, "PRE_ORDER_DATE");
        public final static Property SalesforceId = new Property(2, String.class, "salesforceId", false, "SALESFORCE_ID");
        public final static Property PreOrderQuantity = new Property(3, Double.class, "preOrderQuantity", false, "PRE_ORDER_QUANTITY");
        public final static Property Product = new Property(4, String.class, "product", false, "PRODUCT");
        public final static Property Unit = new Property(5, String.class, "unit", false, "UNIT");
        public final static Property ReasonForNotOrdering = new Property(6, String.class, "reasonForNotOrdering", false, "REASON_FOR_NOT_ORDERING");
        public final static Property AccountId = new Property(7, long.class, "accountId", false, "ACCOUNT_ID");
        public final static Property ProspectId = new Property(8, long.class, "prospectId", false, "PROSPECT_ID");
    };

    private DaoSession daoSession;

    private Query<TeleSale> account_TeleSalesQuery;
    private Query<TeleSale> prospect_TeleSalesQuery;

    public TeleSaleDao(DaoConfig config) {
        super(config);
    }
    
    public TeleSaleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TELE_SALE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PRE_ORDER_DATE' TEXT," + // 1: preOrderDate
                "'SALESFORCE_ID' TEXT," + // 2: salesforceId
                "'PRE_ORDER_QUANTITY' REAL," + // 3: preOrderQuantity
                "'PRODUCT' TEXT," + // 4: product
                "'UNIT' TEXT," + // 5: unit
                "'REASON_FOR_NOT_ORDERING' TEXT," + // 6: reasonForNotOrdering
                "'ACCOUNT_ID' INTEGER NOT NULL ," + // 7: accountId
                "'PROSPECT_ID' INTEGER NOT NULL );"); // 8: prospectId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TELE_SALE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TeleSale entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String preOrderDate = entity.getPreOrderDate();
        if (preOrderDate != null) {
            stmt.bindString(2, preOrderDate);
        }
 
        String salesforceId = entity.getSalesforceId();
        if (salesforceId != null) {
            stmt.bindString(3, salesforceId);
        }
 
        Double preOrderQuantity = entity.getPreOrderQuantity();
        if (preOrderQuantity != null) {
            stmt.bindDouble(4, preOrderQuantity);
        }
 
        String product = entity.getProduct();
        if (product != null) {
            stmt.bindString(5, product);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        String reasonForNotOrdering = entity.getReasonForNotOrdering();
        if (reasonForNotOrdering != null) {
            stmt.bindString(7, reasonForNotOrdering);
        }
        stmt.bindLong(8, entity.getAccountId());
        stmt.bindLong(9, entity.getProspectId());
    }

    @Override
    protected void attachEntity(TeleSale entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TeleSale readEntity(Cursor cursor, int offset) {
        TeleSale entity = new TeleSale( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // preOrderDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // salesforceId
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // preOrderQuantity
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // product
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // reasonForNotOrdering
            cursor.getLong(offset + 7), // accountId
            cursor.getLong(offset + 8) // prospectId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TeleSale entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPreOrderDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSalesforceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPreOrderQuantity(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setProduct(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReasonForNotOrdering(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccountId(cursor.getLong(offset + 7));
        entity.setProspectId(cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TeleSale entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TeleSale entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "teleSales" to-many relationship of Account. */
    public List<TeleSale> _queryAccount_TeleSales(long accountId) {
        synchronized (this) {
            if (account_TeleSalesQuery == null) {
                QueryBuilder<TeleSale> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AccountId.eq(null));
                account_TeleSalesQuery = queryBuilder.build();
            }
        }
        Query<TeleSale> query = account_TeleSalesQuery.forCurrentThread();
        query.setParameter(0, accountId);
        return query.list();
    }

    /** Internal query to resolve the "teleSales" to-many relationship of Prospect. */
    public List<TeleSale> _queryProspect_TeleSales(long prospectId) {
        synchronized (this) {
            if (prospect_TeleSalesQuery == null) {
                QueryBuilder<TeleSale> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProspectId.eq(null));
                prospect_TeleSalesQuery = queryBuilder.build();
            }
        }
        Query<TeleSale> query = prospect_TeleSalesQuery.forCurrentThread();
        query.setParameter(0, prospectId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAccountDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getProspectDao().getAllColumns());
            builder.append(" FROM TELE_SALE T");
            builder.append(" LEFT JOIN ACCOUNT T0 ON T.'ACCOUNT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN PROSPECT T1 ON T.'PROSPECT_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TeleSale loadCurrentDeep(Cursor cursor, boolean lock) {
        TeleSale entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Account account = loadCurrentOther(daoSession.getAccountDao(), cursor, offset);
         if(account != null) {
            entity.setAccount(account);
        }
        offset += daoSession.getAccountDao().getAllColumns().length;

        Prospect prospect = loadCurrentOther(daoSession.getProspectDao(), cursor, offset);
         if(prospect != null) {
            entity.setProspect(prospect);
        }

        return entity;    
    }

    public TeleSale loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TeleSale> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TeleSale> list = new ArrayList<TeleSale>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TeleSale> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TeleSale> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
