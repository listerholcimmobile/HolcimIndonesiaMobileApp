package com.holcim.altimetrik.android.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.holcim.altimetrik.android.model.SaleExecution;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table SALE_EXECUTION.
 */
public class SaleExecutionDao extends AbstractDao<SaleExecution, Long> {

	public static final String TABLENAME = "SALE_EXECUTION";

	/**
	 * Properties of entity SaleExecution.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property SalesforceId = new Property(1,
				String.class, "salesforceId", false, "SALESFORCE_ID");
		public final static Property VisitDate = new Property(2, String.class,
				"visitDate", false, "VISIT_DATE");
		public final static Property InspectionDate = new Property(3,
				String.class, "inspectionDate", false, "INSPECTION_DATE");
		public final static Property AvailabilityOfHILShopSign = new Property(
				4, String.class, "availabilityOfHILShopSign", false,
				"AVAILABILITY_OF_HILSHOP_SIGN");
		public final static Property AccountRecordType = new Property(5,
				String.class, "accountRecordType", false, "ACCOUNT_RECORD_TYPE");
		public final static Property VisibilityOfHILShopSign = new Property(6,
				String.class, "visibilityOfHILShopSign", false,
				"VISIBILITY_OF_HILSHOP_SIGN");
		public final static Property ConditionOfShopSign = new Property(7,
				String.class, "conditionOfShopSign", false,
				"CONDITION_OF_SHOP_SIGN");
		public final static Property ColorCondition = new Property(8,
				String.class, "colorCondition", false, "COLOR_CONDITION");
		public final static Property ShopSign = new Property(9, String.class,
				"shopSign", false, "SHOP_SIGN");
		public final static Property Priority = new Property(10, String.class,
				"priority", false, "PRIORITY");
		public final static Property VisibilityOfCompetitorShopSign = new Property(
				11, String.class, "visibilityOfCompetitorShopSign", false,
				"VISIBILITY_OF_COMPETITOR_SHOP_SIGN");
		public final static Property TypeOfShopSign = new Property(12,
				String.class, "typeOfShopSign", false, "TYPE_OF_SHOP_SIGN");
		public final static Property PhysicalCondition = new Property(13,
				String.class, "physicalCondition", false, "PHYSICAL_CONDITION");
		public final static Property CleanessCondition = new Property(14,
				String.class, "cleanessCondition", false, "CLEANESS_CONDITION");
		public final static Property Action = new Property(15, String.class,
				"action", false, "ACTION");
		public final static Property ActionStatus = new Property(16,
				String.class, "actionStatus", false, "ACTION_STATUS");
		public final static Property AcademicTitle = new Property(17,
				String.class, "academicTitle", false, "ACADEMIC_TITLE");
		public final static Property ActualVisitDate = new Property(18,
				String.class, "actualVisitDate", false, "ACTUAL_VISIT_DATE");
		public final static Property BankAccountBranch1 = new Property(19,
				String.class, "bankAccountBranch1", false,
				"BANK_ACCOUNT_BRANCH1");
		public final static Property BankAccountBranch2 = new Property(20,
				String.class, "bankAccountBranch2", false,
				"BANK_ACCOUNT_BRANCH2");
		public final static Property BankAccountBranch3 = new Property(21,
				String.class, "bankAccountBranch3", false,
				"BANK_ACCOUNT_BRANCH3");
		public final static Property BankAccountName1 = new Property(22,
				String.class, "bankAccountName1", false, "BANK_ACCOUNT_NAME1");
		public final static Property BankAccountName2 = new Property(23,
				String.class, "bankAccountName2", false, "BANK_ACCOUNT_NAME2");
		public final static Property BankAccountName3 = new Property(24,
				String.class, "bankAccountName3", false, "BANK_ACCOUNT_NAME3");
		public final static Property BankAccountNumber1 = new Property(25,
				String.class, "bankAccountNumber1", false,
				"BANK_ACCOUNT_NUMBER1");
		public final static Property BankAccountNumber2 = new Property(26,
				String.class, "bankAccountNumber2", false,
				"BANK_ACCOUNT_NUMBER2");
		public final static Property BankAccountNumber3 = new Property(27,
				String.class, "bankAccountNumber3", false,
				"BANK_ACCOUNT_NUMBER3");
		public final static Property BadDebt = new Property(28, Boolean.class,
				"badDebt", false, "BAD_DEBT");
		public final static Property BirthDate = new Property(29, String.class,
				"birthDate", false, "BIRTH_DATE");
		public final static Property BusinessEntityStatus = new Property(30,
				String.class, "businessEntityStatus", false,
				"BUSINESS_ENTITY_STATUS");
		public final static Property BuyCompetitorName = new Property(31,
				String.class, "buyCompetitorName", false, "BUY_COMPETITOR_NAME");
		public final static Property BuyingVolumeCompetitorName = new Property(
				32, String.class, "buyingVolumeCompetitorName", false,
				"BUYING_VOLUME_COMPETITOR_NAME");
		public final static Property CallNote = new Property(33, String.class,
				"callNote", false, "CALL_NOTE");
		public final static Property CapacityCurrentMonth = new Property(34,
				Double.class, "capacityCurrentMonth", false,
				"CAPACITY_CURRENT_MONTH");
		public final static Property Comments = new Property(35, String.class,
				"comments", false, "COMMENTS");
		public final static Property CompanyName = new Property(36,
				String.class, "companyName", false, "COMPANY_NAME");
		public final static Property Completed = new Property(37,
				Boolean.class, "completed", false, "COMPLETED");
		public final static Property ContactId = new Property(38, String.class,
				"contactId", false, "CONTACT_ID");
		public final static Property ContactMobile1 = new Property(39,
				String.class, "contactMobile1", false, "CONTACT_MOBILE1");
		public final static Property ContactMobile2 = new Property(40,
				String.class, "contactMobile2", false, "CONTACT_MOBILE2");
		public final static Property ContactEmail1 = new Property(41,
				String.class, "contactEmail1", false, "CONTACT_EMAIL1");
		public final static Property ContactName = new Property(42,
				String.class, "contactName", false, "CONTACT_NAME");
		public final static Property ContactStatus = new Property(43,
				String.class, "contactStatus", false, "CONTACT_STATUS");
		public final static Property AccountName = new Property(44,
				String.class, "accountName", false, "ACCOUNT_NAME");
		public final static Property AccountType = new Property(45,
				String.class, "accountType", false, "ACCOUNT_TYPE");
		public final static Property CustomerClass = new Property(46,
				String.class, "customerClass", false, "CUSTOMER_CLASS");
		public final static Property DeliveryRemark = new Property(47,
				String.class, "deliveryRemark", false, "DELIVERY_REMARK");
		public final static Property District = new Property(48, String.class,
				"district", false, "DISTRICT");
		public final static Property EightTTruckArmada = new Property(49,
				String.class, "eightTTruckArmada", false, "EIGHT_TTRUCK_ARMADA");
		public final static Property Email1 = new Property(50, String.class,
				"email1", false, "EMAIL1");
		public final static Property Event = new Property(51, String.class,
				"event", false, "EVENT");
		public final static Property Extension1 = new Property(52,
				String.class, "extension1", false, "EXTENSION1");
		public final static Property ExperienceWithLeadCompetitor = new Property(
				53, String.class, "ExperienceWithLeadCompetitor", false,
				"EXPERIENCE_WITH_LEAD_COMPETITOR");
		public final static Property FavouriteActivities = new Property(54,
				String.class, "favouriteActivities", false,
				"FAVOURITE_ACTIVITIES");
		public final static Property FavouriteDrink = new Property(55,
				String.class, "favouriteDrink", false, "FAVOURITE_DRINK");
		public final static Property FavouriteFood = new Property(56,
				String.class, "favouriteFood", false, "FAVOURITE_FOOD");
		public final static Property FavouriteSports = new Property(57,
				String.class, "favouriteSports", false, "FAVOURITE_SPORTS");
		public final static Property Fax1 = new Property(58, String.class,
				"fax1", false, "FAX1");
		public final static Property FirstName = new Property(59, String.class,
				"firstName", false, "FIRST_NAME");
		public final static Property Gender = new Property(60, String.class,
				"gender", false, "GENDER");
		public final static Property HilBuyingPriceDate = new Property(61,
				String.class, "hilBuyingPriceDate", false,
				"HIL_BUYING_PRICE_DATE");
		public final static Property HilBuyingPrice = new Property(62,
				Double.class, "hilBuyingPrice", false, "HIL_BUYING_PRICE");
		public final static Property HilBuyingVolumeDate = new Property(63,
				String.class, "hilBuyingVolumeDate", false,
				"HIL_BUYING_VOLUME_DATE");
		public final static Property HilBuyingVolume = new Property(64,
				Double.class, "hilBuyingVolume", false, "HIL_BUYING_VOLUME");
		public final static Property HilBuyingInventoryPriceDate = new Property(
				65, String.class, "hilBuyingInventoryPriceDate", false,
				"HIL_BUYING_INVENTORY_PRICE_DATE");
		public final static Property HilBuyingInventoryPrice = new Property(66,
				Double.class, "hilBuyingInventoryPrice", false,
				"HIL_BUYING_INVENTORY_PRICE");
		public final static Property HilBuyingSellingPriceDate = new Property(
				67, String.class, "hilBuyingSellingPriceDate", false,
				"HIL_BUYING_SELLING_PRICE_DATE");
		public final static Property HilBuyingSellingPrice = new Property(68,
				Double.class, "hilBuyingSellingPrice", false,
				"HIL_BUYING_SELLING_PRICE");
		public final static Property HilSoWCurrentMonth = new Property(69,
				Double.class, "hilSoWCurrentMonth", false,
				"HIL_SO_WCURRENT_MONTH");
		public final static Property HmhilBuyingPrice = new Property(70,
				Double.class, "hmhilBuyingPrice", false, "HMHIL_BUYING_PRICE");
		public final static Property HmhilInventory = new Property(71,
				Double.class, "hmhilInventory", false, "HMHIL_INVENTORY");
		public final static Property HmhilSellingPrice = new Property(72,
				Double.class, "hmhilSellingPrice", false, "HMHIL_SELLING_PRICE");
		public final static Property HvlStockStatus = new Property(73,
				Boolean.class, "hvlStockStatus", false, "HVL_STOCK_STATUS");
		public final static Property HvlStockVolumeTonMonth = new Property(74,
				Double.class, "hvlStockVolumeTonMonth", false,
				"HVL_STOCK_VOLUME_TON_MONTH");
		public final static Property Hobbies = new Property(75, String.class,
				"hobbies", false, "HOBBIES");
		public final static Property HolcimeterBalance = new Property(76,
				Double.class, "holcimeterBalance", false, "HOLCIMETER_BALANCE");
		public final static Property HolcimeterBonus = new Property(77,
				Double.class, "holcimeterBonus", false, "HOLCIMETER_BONUS");
		public final static Property HolcimeterTotal = new Property(78,
				Double.class, "holcimeterTotal", false, "HOLCIMETER_TOTAL");
		public final static Property InvCompetitorName = new Property(79,
				String.class, "invCompetitorName", false, "INV_COMPETITOR_NAME");
		public final static Property IsDSR = new Property(80, Boolean.class,
				"isDSR", false, "IS_DSR");
		public final static Property IsFinished = new Property(81,
				Boolean.class, "isFinished", false, "IS_FINISHED");
		public final static Property JelajahHolcimMembership = new Property(82,
				Boolean.class, "jelajahHolcimMembership", false,
				"JELAJAH_HOLCIM_MEMBERSHIP");
		public final static Property JelajahHolcimID = new Property(83,
				String.class, "JelajahHolcimID", false, "JELAJAH_HOLCIM_ID");
		public final static Property JobTitle = new Property(84, String.class,
				"jobTitle", false, "JOB_TITLE");
		public final static Property Kecamatan = new Property(85, String.class,
				"kecamatan", false, "KECAMATAN");
		public final static Property Kelurahan = new Property(86, String.class,
				"kelurahan", false, "KELURAHAN");
		public final static Property Kota = new Property(87, String.class,
				"kota", false, "KOTA");
		public final static Property KeyRetailer = new Property(88,
				Boolean.class, "keyRetailer", false, "KEY_RETAILER");
		public final static Property LandStatus = new Property(89,
				String.class, "landStatus", false, "LAND_STATUS");
		public final static Property LandmarkDescription = new Property(90,
				String.class, "landmarkDescription", false,
				"LANDMARK_DESCRIPTION");
		public final static Property LastActualVisitDate = new Property(91,
				String.class, "lastActualVisitDate", false,
				"LAST_ACTUAL_VISIT_DATE");
		public final static Property LandmarkPicture = new Property(92,
				String.class, "landmarkPicture", false, "LANDMARK_PICTURE");
		public final static Property LastBuyingPrice = new Property(93,
				Double.class, "lastBuyingPrice", false, "LAST_BUYING_PRICE");
		public final static Property LastBuyingPriceDate = new Property(94,
				String.class, "lastBuyingPriceDate", false,
				"LAST_BUYING_PRICE_DATE");
		public final static Property LastBuyingVolume = new Property(95,
				Double.class, "lastBuyingVolume", false, "LAST_BUYING_VOLUME");
		public final static Property LastBuyingVolumeDate = new Property(96,
				String.class, "lastBuyingVolumeDate", false,
				"LAST_BUYING_VOLUME_DATE");
		public final static Property LastDispatchDate = new Property(97,
				String.class, "lastDispatchDate", false, "LAST_DISPATCH_DATE");
		public final static Property LastHILBuyingVolume = new Property(98,
				Double.class, "lastHILBuyingVolume", false,
				"LAST_HILBUYING_VOLUME");
		public final static Property LastInventory = new Property(99,
				Double.class, "lastInventory", false, "LAST_INVENTORY");
		public final static Property LastInventoryDate = new Property(100,
				String.class, "lastInventoryDate", false, "LAST_INVENTORY_DATE");
		public final static Property LastName = new Property(101, String.class,
				"lastName", false, "LAST_NAME");
		public final static Property LastPlannedVisitDate = new Property(102,
				String.class, "lastPlannedVisitDate", false,
				"LAST_PLANNED_VISIT_DATE");
		public final static Property LastRewardRedeemed = new Property(103,
				String.class, "lastRewardRedeemed", false,
				"LAST_REWARD_REDEEMED");
		public final static Property LastSellingPrice = new Property(104,
				Double.class, "lastSellingPrice", false, "LAST_SELLING_PRICE");
		public final static Property LastSellingPriceDate = new Property(105,
				String.class, "lastSellingPriceDate", false,
				"LAST_SELLING_PRICE_DATE");
		public final static Property Latitude = new Property(106, String.class,
				"latitude", false, "LATITUDE");
		public final static Property Longitude = new Property(107,
				String.class, "longitude", false, "LONGITUDE");
		public final static Property MailingAddress = new Property(108,
				String.class, "mailingAddress", false, "MAILING_ADDRESS");
		public final static Property MaritalStatus = new Property(109,
				String.class, "maritalStatus", false, "MARITAL_STATUS");
		public final static Property Mobile1 = new Property(110, String.class,
				"mobile1", false, "MOBILE1");
		public final static Property Mobile2 = new Property(111, String.class,
				"mobile2", false, "MOBILE2");
		public final static Property NationalId = new Property(112,
				String.class, "nationalId", false, "NATIONAL_ID");
		public final static Property Nationality = new Property(113,
				String.class, "nationality", false, "NATIONALITY");
		public final static Property NextPlannedVisitDate = new Property(114,
				String.class, "nextPlannedVisitDate", false,
				"NEXT_PLANNED_VISIT_DATE");
		public final static Property NotFavouriteDrink = new Property(115,
				String.class, "notFavouriteDrink", false, "NOT_FAVOURITE_DRINK");
		public final static Property NotFavouriteFood = new Property(116,
				String.class, "notFavouriteFood", false, "NOT_FAVOURITE_FOOD");
		public final static Property Note = new Property(117, String.class,
				"Note", false, "NOTE");
		public final static Property Number = new Property(118, String.class,
				"Number", false, "NUMBER");
		public final static Property NumberOfPermanentEmployees = new Property(
				119, Double.class, "numberOfPermanentEmployees", false,
				"NUMBER_OF_PERMANENT_EMPLOYEES");
		public final static Property OrderDate = new Property(120,
				String.class, "orderDate", false, "ORDER_DATE");
		public final static Property OrderVolume = new Property(121,
				Double.class, "orderVolume", false, "ORDER_VOLUME");
		public final static Property OwnerContactNumber = new Property(122,
				String.class, "ownerContactNumber", false,
				"OWNER_CONTACT_NUMBER");
		public final static Property SupplierName = new Property(123,
				String.class, "supplierName", false, "SUPPLIER_NAME");
		public final static Property Phone1 = new Property(124, String.class,
				"phone1", false, "PHONE1");
		public final static Property Phone2 = new Property(125, String.class,
				"phone2", false, "PHONE2");
		public final static Property PickUp2TArmada = new Property(126,
				String.class, "pickUp2TArmada", false, "PICK_UP2_TARMADA");
		public final static Property Picture = new Property(127, String.class,
				"picture", false, "PICTURE");
		public final static Property PostalCode = new Property(128,
				String.class, "postalCode", false, "POSTAL_CODE");
		public final static Property PreferredName = new Property(129,
				String.class, "preferredName", false, "PREFERRED_NAME");
		public final static Property PreferredContactMethod = new Property(130,
				String.class, "preferredContactMethod", false,
				"PREFERRED_CONTACT_METHOD");
		public final static Property Province = new Property(131, String.class,
				"province", false, "PROVINCE");
		public final static Property Program = new Property(132, String.class,
				"program", false, "PROGRAM");
		public final static Property ProgramStartDate = new Property(133,
				String.class, "programStartDate", false, "PROGRAM_START_DATE");
		public final static Property ProgramEndDate = new Property(134,
				String.class, "programEndDate", false, "PROGRAM_END_DATE");
		public final static Property Promotion = new Property(135,
				String.class, "promotion", false, "PROMOTION");
		public final static Property PromotionStartDate = new Property(136,
				String.class, "promotionStartDate", false,
				"PROMOTION_START_DATE");
		public final static Property PromotionEndDate = new Property(137,
				String.class, "promotionEndDate", false, "PROMOTION_END_DATE");
		public final static Property ReasonForNotAchievingTarget = new Property(
				138, String.class, "reasonForNotAchievingTarget", false,
				"REASON_FOR_NOT_ACHIEVING_TARGET");
		public final static Property Religion = new Property(139, String.class,
				"religion", false, "RELIGION");
		public final static Property RetailerCreditLimit = new Property(140,
				Double.class, "retailerCreditLimit", false,
				"RETAILER_CREDIT_LIMIT");
		public final static Property RetailerId = new Property(141,
				String.class, "retailerId", false, "RETAILER_ID");
		public final static Property RetailerName = new Property(142,
				String.class, "retailerName", false, "RETAILER_NAME");
		public final static Property RetailerStatus = new Property(143,
				String.class, "retailerStatus", false, "RETAILER_STATUS");
		public final static Property RetailerTermOfPayment = new Property(144,
				String.class, "retailerTermOfPayment", false,
				"RETAILER_TERM_OF_PAYMENT");
		public final static Property ReasonForBuyingFromLeadCompetitor = new Property(
				145, String.class, "ReasonForBuyingFromLeadCompetitor", false,
				"REASON_FOR_BUYING_FROM_LEAD_COMPETITOR");
		public final static Property ReasonForUnsatisfiedExperience = new Property(
				146, String.class, "ReasonForUnsatisfiedExperience", false,
				"REASON_FOR_UNSATISFIED_EXPERIENCE");
		public final static Property SsCompetitorName = new Property(147,
				String.class, "ssCompetitorName", false, "SS_COMPETITOR_NAME");
		public final static Property SsPictureDate = new Property(148,
				String.class, "ssPictureDate", false, "SS_PICTURE_DATE");
		public final static Property SsPictureDescription = new Property(149,
				String.class, "ssPictureDescription", false,
				"SS_PICTURE_DESCRIPTION");
		public final static Property SsPicture = new Property(150,
				String.class, "ssPicture", false, "SS_PICTURE");
		public final static Property SalesActualMTD = new Property(151,
				Double.class, "salesActualMTD", false, "SALES_ACTUAL_MTD");
		public final static Property SalesCallNote = new Property(152,
				String.class, "salesCallNote", false, "SALES_CALL_NOTE");
		public final static Property SalesOfficerId = new Property(153,
				String.class, "salesOfficerId", false, "SALES_OFFICER_ID");
		public final static Property SalesOfficer = new Property(154,
				String.class, "salesOfficer", false, "SALES_OFFICER");
		public final static Property SalesTargetCurrentMonth = new Property(
				155, Double.class, "salesTargetCurrentMonth", false,
				"SALES_TARGET_CURRENT_MONTH");
		public final static Property SalesTargetMTD = new Property(156,
				Double.class, "salesTargetMTD", false, "SALES_TARGET_MTD");
		public final static Property SalesmanInChargeId = new Property(157,
				String.class, "salesmanInChargeId", false,
				"SALESMAN_IN_CHARGE_ID");
		public final static Property SalesmanInCharge = new Property(158,
				String.class, "salesmanInCharge", false, "SALESMAN_IN_CHARGE");
		public final static Property SendAlert = new Property(159,
				Boolean.class, "sendAlert", false, "SEND_ALERT");
		public final static Property ShopSignRemark = new Property(160,
				String.class, "shopSignRemark", false, "SHOP_SIGN_REMARK");
		public final static Property SignBoard = new Property(161,
				String.class, "signBoard", false, "SIGN_BOARD");
		public final static Property StartingYear = new Property(162,
				Integer.class, "startingYear", false, "STARTING_YEAR");
		public final static Property Status = new Property(163, String.class,
				"status", false, "STATUS");
		public final static Property StreetAddress = new Property(164,
				String.class, "streetAddress", false, "STREET_ADDRESS");
		public final static Property Submitted = new Property(165,
				Boolean.class, "submitted", false, "SUBMITTED");
		public final static Property TierKLABHistory = new Property(166,
				String.class, "tierKLABHistory", false, "TIER_KLABHISTORY");
		public final static Property TierKLAB = new Property(167, String.class,
				"tierKLAB", false, "TIER_KLAB");
		public final static Property Title = new Property(168, String.class,
				"title", false, "TITLE");
		public final static Property TwentyFourTTruckArmada = new Property(169,
				String.class, "twentyFourTTruckArmada", false,
				"TWENTY_FOUR_TTRUCK_ARMADA");
		public final static Property X1stDesiredRewardPoints = new Property(
				170, Double.class, "x1stDesiredRewardPoints", false,
				"X1ST_DESIRED_REWARD_POINTS");
		public final static Property X1stDesiredReward = new Property(171,
				String.class, "x1stDesiredReward", false, "X1ST_DESIRED_REWARD");
		public final static Property X2ndDesiredRewardPoints = new Property(
				172, Double.class, "x2ndDesiredRewardPoints", false,
				"X2ND_DESIRED_REWARD_POINTS");
		public final static Property X2ndDesiredReward = new Property(173,
				String.class, "x2ndDesiredReward", false, "X2ND_DESIRED_REWARD");
		public final static Property X3rdDesiredRewardPoints = new Property(
				174, Double.class, "x3rdDesiredRewardPoints", false,
				"X3RD_DESIRED_REWARD_POINTS");
		public final static Property X3rdDesiredReward = new Property(175,
				String.class, "x3rdDesiredReward", false, "X3RD_DESIRED_REWARD");
		public final static Property IsProspect = new Property(176,
				Boolean.class, "isProspect", false, "IS_PROSPECT");
		public final static Property LandmarkPictureMD5 = new Property(177,
				String.class, "landmarkPictureMD5", false,
				"LANDMARK_PICTURE_MD5");
		public final static Property PictureMD5 = new Property(178,
				String.class, "pictureMD5", false, "PICTURE_MD5");
		public final static Property SsPictureMD5 = new Property(179,
				String.class, "ssPictureMD5", false, "SS_PICTURE_MD5");
		public final static Property ReasonForCancelling = new Property(180,
				String.class, "reasonForCancelling", false,
				"REASON_FOR_CANCELLING");
		public final static Property UnplannedVisitReason = new Property(181,
				String.class, "unplannedVisitReason", false,
				"UNPLANNED_VISIT_REASON");
		public final static Property CheckInDateTime = new Property(182,
				String.class, "checkInDateTime", false, "CHECK_IN_DATE_TIME");
		public final static Property IsEdited = new Property(183,
				Boolean.class, "isEdited", false, "IS_EDITED");
		public final static Property ProspectId = new Property(184, long.class,
				"prospectId", false, "PROSPECT_ID");
		public final static Property AccountId = new Property(185, long.class,
				"accountId", false, "ACCOUNT_ID");
	};

	private DaoSession daoSession;

	private Query<SaleExecution> prospect_SaleExecutionsQuery;
	private Query<SaleExecution> account_SaleExecutionsQuery;

	public SaleExecutionDao(DaoConfig config) {
		super(config);
	}

	public SaleExecutionDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'SALE_EXECUTION' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'SALESFORCE_ID' TEXT," + // 1: salesforceId
				"'VISIT_DATE' TEXT NOT NULL ," + // 2: visitDate
				"'INSPECTION_DATE' TEXT," + // 3: inspectionDate
				"'AVAILABILITY_OF_HILSHOP_SIGN' TEXT," + // 4:
															// availabilityOfHILShopSign
				"'ACCOUNT_RECORD_TYPE' TEXT," + // 5: accountRecordType
				"'VISIBILITY_OF_HILSHOP_SIGN' TEXT," + // 6:
														// visibilityOfHILShopSign
				"'CONDITION_OF_SHOP_SIGN' TEXT," + // 7: conditionOfShopSign
				"'COLOR_CONDITION' TEXT," + // 8: colorCondition
				"'SHOP_SIGN' TEXT," + // 9: shopSign
				"'PRIORITY' TEXT," + // 10: priority
				"'VISIBILITY_OF_COMPETITOR_SHOP_SIGN' TEXT," + // 11:
																// visibilityOfCompetitorShopSign
				"'TYPE_OF_SHOP_SIGN' TEXT," + // 12: typeOfShopSign
				"'PHYSICAL_CONDITION' TEXT," + // 13: physicalCondition
				"'CLEANESS_CONDITION' TEXT," + // 14: cleanessCondition
				"'ACTION' TEXT," + // 15: action
				"'ACTION_STATUS' TEXT," + // 16: actionStatus
				"'ACADEMIC_TITLE' TEXT," + // 17: academicTitle
				"'ACTUAL_VISIT_DATE' TEXT," + // 18: actualVisitDate
				"'BANK_ACCOUNT_BRANCH1' TEXT," + // 19: bankAccountBranch1
				"'BANK_ACCOUNT_BRANCH2' TEXT," + // 20: bankAccountBranch2
				"'BANK_ACCOUNT_BRANCH3' TEXT," + // 21: bankAccountBranch3
				"'BANK_ACCOUNT_NAME1' TEXT," + // 22: bankAccountName1
				"'BANK_ACCOUNT_NAME2' TEXT," + // 23: bankAccountName2
				"'BANK_ACCOUNT_NAME3' TEXT," + // 24: bankAccountName3
				"'BANK_ACCOUNT_NUMBER1' TEXT," + // 25: bankAccountNumber1
				"'BANK_ACCOUNT_NUMBER2' TEXT," + // 26: bankAccountNumber2
				"'BANK_ACCOUNT_NUMBER3' TEXT," + // 27: bankAccountNumber3
				"'BAD_DEBT' INTEGER," + // 28: badDebt
				"'BIRTH_DATE' TEXT," + // 29: birthDate
				"'BUSINESS_ENTITY_STATUS' TEXT," + // 30: businessEntityStatus
				"'BUY_COMPETITOR_NAME' TEXT," + // 31: buyCompetitorName
				"'BUYING_VOLUME_COMPETITOR_NAME' TEXT," + // 32:
															// buyingVolumeCompetitorName
				"'CALL_NOTE' TEXT," + // 33: callNote
				"'CAPACITY_CURRENT_MONTH' REAL," + // 34: capacityCurrentMonth
				"'COMMENTS' TEXT," + // 35: comments
				"'COMPANY_NAME' TEXT," + // 36: companyName
				"'COMPLETED' INTEGER," + // 37: completed
				"'CONTACT_ID' TEXT," + // 38: contactId
				"'CONTACT_MOBILE1' TEXT," + // 39: contactMobile1
				"'CONTACT_MOBILE2' TEXT," + // 40: contactMobile2
				"'CONTACT_EMAIL1' TEXT," + // 41: contactEmail1
				"'CONTACT_NAME' TEXT," + // 42: contactName
				"'CONTACT_STATUS' TEXT," + // 43: contactStatus
				"'ACCOUNT_NAME' TEXT," + // 44: accountName
				"'ACCOUNT_TYPE' TEXT," + // 45: accountType
				"'CUSTOMER_CLASS' TEXT," + // 46: customerClass
				"'DELIVERY_REMARK' TEXT," + // 47: deliveryRemark
				"'DISTRICT' TEXT," + // 48: district
				"'EIGHT_TTRUCK_ARMADA' TEXT," + // 49: eightTTruckArmada
				"'EMAIL1' TEXT," + // 50: email1
				"'EVENT' TEXT," + // 51: event
				"'EXTENSION1' TEXT," + // 52: extension1
				"'EXPERIENCE_WITH_LEAD_COMPETITOR' TEXT," + // 53:
															// ExperienceWithLeadCompetitor
				"'FAVOURITE_ACTIVITIES' TEXT," + // 54: favouriteActivities
				"'FAVOURITE_DRINK' TEXT," + // 55: favouriteDrink
				"'FAVOURITE_FOOD' TEXT," + // 56: favouriteFood
				"'FAVOURITE_SPORTS' TEXT," + // 57: favouriteSports
				"'FAX1' TEXT," + // 58: fax1
				"'FIRST_NAME' TEXT," + // 59: firstName
				"'GENDER' TEXT," + // 60: gender
				"'HIL_BUYING_PRICE_DATE' TEXT," + // 61: hilBuyingPriceDate
				"'HIL_BUYING_PRICE' REAL," + // 62: hilBuyingPrice
				"'HIL_BUYING_VOLUME_DATE' TEXT," + // 63: hilBuyingVolumeDate
				"'HIL_BUYING_VOLUME' REAL," + // 64: hilBuyingVolume
				"'HIL_BUYING_INVENTORY_PRICE_DATE' TEXT," + // 65:
															// hilBuyingInventoryPriceDate
				"'HIL_BUYING_INVENTORY_PRICE' REAL," + // 66:
														// hilBuyingInventoryPrice
				"'HIL_BUYING_SELLING_PRICE_DATE' TEXT," + // 67:
															// hilBuyingSellingPriceDate
				"'HIL_BUYING_SELLING_PRICE' REAL," + // 68:
														// hilBuyingSellingPrice
				"'HIL_SO_WCURRENT_MONTH' REAL," + // 69: hilSoWCurrentMonth
				"'HMHIL_BUYING_PRICE' REAL," + // 70: hmhilBuyingPrice
				"'HMHIL_INVENTORY' REAL," + // 71: hmhilInventory
				"'HMHIL_SELLING_PRICE' REAL," + // 72: hmhilSellingPrice
				"'HVL_STOCK_STATUS' INTEGER," + // 73: hvlStockStatus
				"'HVL_STOCK_VOLUME_TON_MONTH' REAL," + // 74:
														// hvlStockVolumeTonMonth
				"'HOBBIES' TEXT," + // 75: hobbies
				"'HOLCIMETER_BALANCE' REAL," + // 76: holcimeterBalance
				"'HOLCIMETER_BONUS' REAL," + // 77: holcimeterBonus
				"'HOLCIMETER_TOTAL' REAL," + // 78: holcimeterTotal
				"'INV_COMPETITOR_NAME' TEXT," + // 79: invCompetitorName
				"'IS_DSR' INTEGER," + // 80: isDSR
				"'IS_FINISHED' INTEGER," + // 81: isFinished
				"'JELAJAH_HOLCIM_MEMBERSHIP' INTEGER," + // 82:
															// jelajahHolcimMembership
				"'JELAJAH_HOLCIM_ID' TEXT," + // 83: JelajahHolcimID
				"'JOB_TITLE' TEXT," + // 84: jobTitle
				"'KECAMATAN' TEXT," + // 85: kecamatan
				"'KELURAHAN' TEXT," + // 86: kelurahan
				"'KOTA' TEXT," + // 87: kota
				"'KEY_RETAILER' INTEGER," + // 88: keyRetailer
				"'LAND_STATUS' TEXT," + // 89: landStatus
				"'LANDMARK_DESCRIPTION' TEXT," + // 90: landmarkDescription
				"'LAST_ACTUAL_VISIT_DATE' TEXT," + // 91: lastActualVisitDate
				"'LANDMARK_PICTURE' TEXT," + // 92: landmarkPicture
				"'LAST_BUYING_PRICE' REAL," + // 93: lastBuyingPrice
				"'LAST_BUYING_PRICE_DATE' TEXT," + // 94: lastBuyingPriceDate
				"'LAST_BUYING_VOLUME' REAL," + // 95: lastBuyingVolume
				"'LAST_BUYING_VOLUME_DATE' TEXT," + // 96: lastBuyingVolumeDate
				"'LAST_DISPATCH_DATE' TEXT," + // 97: lastDispatchDate
				"'LAST_HILBUYING_VOLUME' REAL," + // 98: lastHILBuyingVolume
				"'LAST_INVENTORY' REAL," + // 99: lastInventory
				"'LAST_INVENTORY_DATE' TEXT," + // 100: lastInventoryDate
				"'LAST_NAME' TEXT," + // 101: lastName
				"'LAST_PLANNED_VISIT_DATE' TEXT," + // 102: lastPlannedVisitDate
				"'LAST_REWARD_REDEEMED' TEXT," + // 103: lastRewardRedeemed
				"'LAST_SELLING_PRICE' REAL," + // 104: lastSellingPrice
				"'LAST_SELLING_PRICE_DATE' TEXT," + // 105: lastSellingPriceDate
				"'LATITUDE' TEXT," + // 106: latitude
				"'LONGITUDE' TEXT," + // 107: longitude
				"'MAILING_ADDRESS' TEXT," + // 108: mailingAddress
				"'MARITAL_STATUS' TEXT," + // 109: maritalStatus
				"'MOBILE1' TEXT," + // 110: mobile1
				"'MOBILE2' TEXT," + // 111: mobile2
				"'NATIONAL_ID' TEXT," + // 112: nationalId
				"'NATIONALITY' TEXT," + // 113: nationality
				"'NEXT_PLANNED_VISIT_DATE' TEXT," + // 114: nextPlannedVisitDate
				"'NOT_FAVOURITE_DRINK' TEXT," + // 115: notFavouriteDrink
				"'NOT_FAVOURITE_FOOD' TEXT," + // 116: notFavouriteFood
				"'NOTE' TEXT," + // 117: Note
				"'NUMBER' TEXT," + // 118: Number
				"'NUMBER_OF_PERMANENT_EMPLOYEES' REAL," + // 119:
															// numberOfPermanentEmployees
				"'ORDER_DATE' TEXT," + // 120: orderDate
				"'ORDER_VOLUME' REAL," + // 121: orderVolume
				"'OWNER_CONTACT_NUMBER' TEXT," + // 122: ownerContactNumber
				"'SUPPLIER_NAME' TEXT," + // 123: supplierName
				"'PHONE1' TEXT," + // 124: phone1
				"'PHONE2' TEXT," + // 125: phone2
				"'PICK_UP2_TARMADA' TEXT," + // 126: pickUp2TArmada
				"'PICTURE' TEXT," + // 127: picture
				"'POSTAL_CODE' TEXT," + // 128: postalCode
				"'PREFERRED_NAME' TEXT," + // 129: preferredName
				"'PREFERRED_CONTACT_METHOD' TEXT," + // 130:
														// preferredContactMethod
				"'PROVINCE' TEXT," + // 131: province
				"'PROGRAM' TEXT," + // 132: program
				"'PROGRAM_START_DATE' TEXT," + // 133: programStartDate
				"'PROGRAM_END_DATE' TEXT," + // 134: programEndDate
				"'PROMOTION' TEXT," + // 135: promotion
				"'PROMOTION_START_DATE' TEXT," + // 136: promotionStartDate
				"'PROMOTION_END_DATE' TEXT," + // 137: promotionEndDate
				"'REASON_FOR_NOT_ACHIEVING_TARGET' TEXT," + // 138:
															// reasonForNotAchievingTarget
				"'RELIGION' TEXT," + // 139: religion
				"'RETAILER_CREDIT_LIMIT' REAL," + // 140: retailerCreditLimit
				"'RETAILER_ID' TEXT," + // 141: retailerId
				"'RETAILER_NAME' TEXT," + // 142: retailerName
				"'RETAILER_STATUS' TEXT," + // 143: retailerStatus
				"'RETAILER_TERM_OF_PAYMENT' TEXT," + // 144:
														// retailerTermOfPayment
				"'REASON_FOR_BUYING_FROM_LEAD_COMPETITOR' TEXT," + // 145:
																	// ReasonForBuyingFromLeadCompetitor
				"'REASON_FOR_UNSATISFIED_EXPERIENCE' TEXT," + // 146:
																// ReasonForUnsatisfiedExperience
				"'SS_COMPETITOR_NAME' TEXT," + // 147: ssCompetitorName
				"'SS_PICTURE_DATE' TEXT," + // 148: ssPictureDate
				"'SS_PICTURE_DESCRIPTION' TEXT," + // 149: ssPictureDescription
				"'SS_PICTURE' TEXT," + // 150: ssPicture
				"'SALES_ACTUAL_MTD' REAL," + // 151: salesActualMTD
				"'SALES_CALL_NOTE' TEXT," + // 152: salesCallNote
				"'SALES_OFFICER_ID' TEXT," + // 153: salesOfficerId
				"'SALES_OFFICER' TEXT," + // 154: salesOfficer
				"'SALES_TARGET_CURRENT_MONTH' REAL," + // 155:
														// salesTargetCurrentMonth
				"'SALES_TARGET_MTD' REAL," + // 156: salesTargetMTD
				"'SALESMAN_IN_CHARGE_ID' TEXT," + // 157: salesmanInChargeId
				"'SALESMAN_IN_CHARGE' TEXT," + // 158: salesmanInCharge
				"'SEND_ALERT' INTEGER," + // 159: sendAlert
				"'SHOP_SIGN_REMARK' TEXT," + // 160: shopSignRemark
				"'SIGN_BOARD' TEXT," + // 161: signBoard
				"'STARTING_YEAR' INTEGER," + // 162: startingYear
				"'STATUS' TEXT," + // 163: status
				"'STREET_ADDRESS' TEXT," + // 164: streetAddress
				"'SUBMITTED' INTEGER," + // 165: submitted
				"'TIER_KLABHISTORY' TEXT," + // 166: tierKLABHistory
				"'TIER_KLAB' TEXT," + // 167: tierKLAB
				"'TITLE' TEXT," + // 168: title
				"'TWENTY_FOUR_TTRUCK_ARMADA' TEXT," + // 169:
														// twentyFourTTruckArmada
				"'X1ST_DESIRED_REWARD_POINTS' REAL," + // 170:
														// x1stDesiredRewardPoints
				"'X1ST_DESIRED_REWARD' TEXT," + // 171: x1stDesiredReward
				"'X2ND_DESIRED_REWARD_POINTS' REAL," + // 172:
														// x2ndDesiredRewardPoints
				"'X2ND_DESIRED_REWARD' TEXT," + // 173: x2ndDesiredReward
				"'X3RD_DESIRED_REWARD_POINTS' REAL," + // 174:
														// x3rdDesiredRewardPoints
				"'X3RD_DESIRED_REWARD' TEXT," + // 175: x3rdDesiredReward
				"'IS_PROSPECT' INTEGER," + // 176: isProspect
				"'LANDMARK_PICTURE_MD5' TEXT," + // 177: landmarkPictureMD5
				"'PICTURE_MD5' TEXT," + // 178: pictureMD5
				"'SS_PICTURE_MD5' TEXT," + // 179: ssPictureMD5
				"'REASON_FOR_CANCELLING' TEXT," + // 180: reasonForCancelling
				"'UNPLANNED_VISIT_REASON' TEXT," + // 181: unplannedVisitReason
				"'CHECK_IN_DATE_TIME' TEXT," + // 182: checkInDateTime
				"'IS_EDITED' INTEGER," + // 183: isEdited
				"'PROSPECT_ID' INTEGER NOT NULL ," + // 184: prospectId
				"'ACCOUNT_ID' INTEGER NOT NULL );"); // 185: accountId
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'SALE_EXECUTION'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, SaleExecution entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String salesforceId = entity.getSalesforceId();
		if (salesforceId != null) {
			stmt.bindString(2, salesforceId);
		}
		stmt.bindString(3, entity.getVisitDate());

		String inspectionDate = entity.getInspectionDate();
		if (inspectionDate != null) {
			stmt.bindString(4, inspectionDate);
		}

		String availabilityOfHILShopSign = entity
				.getAvailabilityOfHILShopSign();
		if (availabilityOfHILShopSign != null) {
			stmt.bindString(5, availabilityOfHILShopSign);
		}

		String accountRecordType = entity.getAccountRecordType();
		if (accountRecordType != null) {
			stmt.bindString(6, accountRecordType);
		}

		String visibilityOfHILShopSign = entity.getVisibilityOfHILShopSign();
		if (visibilityOfHILShopSign != null) {
			stmt.bindString(7, visibilityOfHILShopSign);
		}

		String conditionOfShopSign = entity.getConditionOfShopSign();
		if (conditionOfShopSign != null) {
			stmt.bindString(8, conditionOfShopSign);
		}

		String colorCondition = entity.getColorCondition();
		if (colorCondition != null) {
			stmt.bindString(9, colorCondition);
		}

		String shopSign = entity.getShopSign();
		if (shopSign != null) {
			stmt.bindString(10, shopSign);
		}

		String priority = entity.getPriority();
		if (priority != null) {
			stmt.bindString(11, priority);
		}

		String visibilityOfCompetitorShopSign = entity
				.getVisibilityOfCompetitorShopSign();
		if (visibilityOfCompetitorShopSign != null) {
			stmt.bindString(12, visibilityOfCompetitorShopSign);
		}

		String typeOfShopSign = entity.getTypeOfShopSign();
		if (typeOfShopSign != null) {
			stmt.bindString(13, typeOfShopSign);
		}

		String physicalCondition = entity.getPhysicalCondition();
		if (physicalCondition != null) {
			stmt.bindString(14, physicalCondition);
		}

		String cleanessCondition = entity.getCleanessCondition();
		if (cleanessCondition != null) {
			stmt.bindString(15, cleanessCondition);
		}

		String action = entity.getAction();
		if (action != null) {
			stmt.bindString(16, action);
		}

		String actionStatus = entity.getActionStatus();
		if (actionStatus != null) {
			stmt.bindString(17, actionStatus);
		}

		String academicTitle = entity.getAcademicTitle();
		if (academicTitle != null) {
			stmt.bindString(18, academicTitle);
		}

		String actualVisitDate = entity.getActualVisitDate();
		if (actualVisitDate != null) {
			stmt.bindString(19, actualVisitDate);
		}

		String bankAccountBranch1 = entity.getBankAccountBranch1();
		if (bankAccountBranch1 != null) {
			stmt.bindString(20, bankAccountBranch1);
		}

		String bankAccountBranch2 = entity.getBankAccountBranch2();
		if (bankAccountBranch2 != null) {
			stmt.bindString(21, bankAccountBranch2);
		}

		String bankAccountBranch3 = entity.getBankAccountBranch3();
		if (bankAccountBranch3 != null) {
			stmt.bindString(22, bankAccountBranch3);
		}

		String bankAccountName1 = entity.getBankAccountName1();
		if (bankAccountName1 != null) {
			stmt.bindString(23, bankAccountName1);
		}

		String bankAccountName2 = entity.getBankAccountName2();
		if (bankAccountName2 != null) {
			stmt.bindString(24, bankAccountName2);
		}

		String bankAccountName3 = entity.getBankAccountName3();
		if (bankAccountName3 != null) {
			stmt.bindString(25, bankAccountName3);
		}

		String bankAccountNumber1 = entity.getBankAccountNumber1();
		if (bankAccountNumber1 != null) {
			stmt.bindString(26, bankAccountNumber1);
		}

		String bankAccountNumber2 = entity.getBankAccountNumber2();
		if (bankAccountNumber2 != null) {
			stmt.bindString(27, bankAccountNumber2);
		}

		String bankAccountNumber3 = entity.getBankAccountNumber3();
		if (bankAccountNumber3 != null) {
			stmt.bindString(28, bankAccountNumber3);
		}

		Boolean badDebt = entity.getBadDebt();
		if (badDebt != null) {
			stmt.bindLong(29, badDebt ? 1l : 0l);
		}

		String birthDate = entity.getBirthDate();
		if (birthDate != null) {
			stmt.bindString(30, birthDate);
		}

		String businessEntityStatus = entity.getBusinessEntityStatus();
		if (businessEntityStatus != null) {
			stmt.bindString(31, businessEntityStatus);
		}

		String buyCompetitorName = entity.getBuyCompetitorName();
		if (buyCompetitorName != null) {
			stmt.bindString(32, buyCompetitorName);
		}

		String buyingVolumeCompetitorName = entity
				.getBuyingVolumeCompetitorName();
		if (buyingVolumeCompetitorName != null) {
			stmt.bindString(33, buyingVolumeCompetitorName);
		}

		String callNote = entity.getCallNote();
		if (callNote != null) {
			stmt.bindString(34, callNote);
		}

		Double capacityCurrentMonth = entity.getCapacityCurrentMonth();
		if (capacityCurrentMonth != null) {
			stmt.bindDouble(35, capacityCurrentMonth);
		}

		String comments = entity.getComments();
		if (comments != null) {
			stmt.bindString(36, comments);
		}

		String companyName = entity.getCompanyName();
		if (companyName != null) {
			stmt.bindString(37, companyName);
		}

		Boolean completed = entity.getCompleted();
		if (completed != null) {
			stmt.bindLong(38, completed ? 1l : 0l);
		}

		String contactId = entity.getContactId();
		if (contactId != null) {
			stmt.bindString(39, contactId);
		}

		String contactMobile1 = entity.getContactMobile1();
		if (contactMobile1 != null) {
			stmt.bindString(40, contactMobile1);
		}

		String contactMobile2 = entity.getContactMobile2();
		if (contactMobile2 != null) {
			stmt.bindString(41, contactMobile2);
		}

		String contactEmail1 = entity.getContactEmail1();
		if (contactEmail1 != null) {
			stmt.bindString(42, contactEmail1);
		}

		String contactName = entity.getContactName();
		if (contactName != null) {
			stmt.bindString(43, contactName);
		}

		String contactStatus = entity.getContactStatus();
		if (contactStatus != null) {
			stmt.bindString(44, contactStatus);
		}

		String accountName = entity.getAccountName();
		if (accountName != null) {
			stmt.bindString(45, accountName);
		}

		String accountType = entity.getAccountType();
		if (accountType != null) {
			stmt.bindString(46, accountType);
		}

		String customerClass = entity.getCustomerClass();
		if (customerClass != null) {
			stmt.bindString(47, customerClass);
		}

		String deliveryRemark = entity.getDeliveryRemark();
		if (deliveryRemark != null) {
			stmt.bindString(48, deliveryRemark);
		}

		String district = entity.getDistrict();
		if (district != null) {
			stmt.bindString(49, district);
		}

		String eightTTruckArmada = entity.getEightTTruckArmada();
		if (eightTTruckArmada != null) {
			stmt.bindString(50, eightTTruckArmada);
		}

		String email1 = entity.getEmail1();
		if (email1 != null) {
			stmt.bindString(51, email1);
		}

		String event = entity.getEvent();
		if (event != null) {
			stmt.bindString(52, event);
		}

		String extension1 = entity.getExtension1();
		if (extension1 != null) {
			stmt.bindString(53, extension1);
		}

		String ExperienceWithLeadCompetitor = entity
				.getExperienceWithLeadCompetitor();
		if (ExperienceWithLeadCompetitor != null) {
			stmt.bindString(54, ExperienceWithLeadCompetitor);
		}

		String favouriteActivities = entity.getFavouriteActivities();
		if (favouriteActivities != null) {
			stmt.bindString(55, favouriteActivities);
		}

		String favouriteDrink = entity.getFavouriteDrink();
		if (favouriteDrink != null) {
			stmt.bindString(56, favouriteDrink);
		}

		String favouriteFood = entity.getFavouriteFood();
		if (favouriteFood != null) {
			stmt.bindString(57, favouriteFood);
		}

		String favouriteSports = entity.getFavouriteSports();
		if (favouriteSports != null) {
			stmt.bindString(58, favouriteSports);
		}

		String fax1 = entity.getFax1();
		if (fax1 != null) {
			stmt.bindString(59, fax1);
		}

		String firstName = entity.getFirstName();
		if (firstName != null) {
			stmt.bindString(60, firstName);
		}

		String gender = entity.getGender();
		if (gender != null) {
			stmt.bindString(61, gender);
		}

		String hilBuyingPriceDate = entity.getHilBuyingPriceDate();
		if (hilBuyingPriceDate != null) {
			stmt.bindString(62, hilBuyingPriceDate);
		}

		Double hilBuyingPrice = entity.getHilBuyingPrice();
		if (hilBuyingPrice != null) {
			stmt.bindDouble(63, hilBuyingPrice);
		}

		String hilBuyingVolumeDate = entity.getHilBuyingVolumeDate();
		if (hilBuyingVolumeDate != null) {
			stmt.bindString(64, hilBuyingVolumeDate);
		}

		Double hilBuyingVolume = entity.getHilBuyingVolume();
		if (hilBuyingVolume != null) {
			stmt.bindDouble(65, hilBuyingVolume);
		}

		String hilBuyingInventoryPriceDate = entity
				.getHilBuyingInventoryPriceDate();
		if (hilBuyingInventoryPriceDate != null) {
			stmt.bindString(66, hilBuyingInventoryPriceDate);
		}

		Double hilBuyingInventoryPrice = entity.getHilBuyingInventoryPrice();
		if (hilBuyingInventoryPrice != null) {
			stmt.bindDouble(67, hilBuyingInventoryPrice);
		}

		String hilBuyingSellingPriceDate = entity
				.getHilBuyingSellingPriceDate();
		if (hilBuyingSellingPriceDate != null) {
			stmt.bindString(68, hilBuyingSellingPriceDate);
		}

		Double hilBuyingSellingPrice = entity.getHilBuyingSellingPrice();
		if (hilBuyingSellingPrice != null) {
			stmt.bindDouble(69, hilBuyingSellingPrice);
		}

		Double hilSoWCurrentMonth = entity.getHilSoWCurrentMonth();
		if (hilSoWCurrentMonth != null) {
			stmt.bindDouble(70, hilSoWCurrentMonth);
		}

		Double hmhilBuyingPrice = entity.getHmhilBuyingPrice();
		if (hmhilBuyingPrice != null) {
			stmt.bindDouble(71, hmhilBuyingPrice);
		}

		Double hmhilInventory = entity.getHmhilInventory();
		if (hmhilInventory != null) {
			stmt.bindDouble(72, hmhilInventory);
		}

		Double hmhilSellingPrice = entity.getHmhilSellingPrice();
		if (hmhilSellingPrice != null) {
			stmt.bindDouble(73, hmhilSellingPrice);
		}

		Boolean hvlStockStatus = entity.getHvlStockStatus();
		if (hvlStockStatus != null) {
			stmt.bindLong(74, hvlStockStatus ? 1l : 0l);
		}

		Double hvlStockVolumeTonMonth = entity.getHvlStockVolumeTonMonth();
		if (hvlStockVolumeTonMonth != null) {
			stmt.bindDouble(75, hvlStockVolumeTonMonth);
		}

		String hobbies = entity.getHobbies();
		if (hobbies != null) {
			stmt.bindString(76, hobbies);
		}

		Double holcimeterBalance = entity.getHolcimeterBalance();
		if (holcimeterBalance != null) {
			stmt.bindDouble(77, holcimeterBalance);
		}

		Double holcimeterBonus = entity.getHolcimeterBonus();
		if (holcimeterBonus != null) {
			stmt.bindDouble(78, holcimeterBonus);
		}

		Double holcimeterTotal = entity.getHolcimeterTotal();
		if (holcimeterTotal != null) {
			stmt.bindDouble(79, holcimeterTotal);
		}

		String invCompetitorName = entity.getInvCompetitorName();
		if (invCompetitorName != null) {
			stmt.bindString(80, invCompetitorName);
		}

		Boolean isDSR = entity.getIsDSR();
		if (isDSR != null) {
			stmt.bindLong(81, isDSR ? 1l : 0l);
		}

		Boolean isFinished = entity.getIsFinished();
		if (isFinished != null) {
			stmt.bindLong(82, isFinished ? 1l : 0l);
		}

		Boolean jelajahHolcimMembership = entity.getJelajahHolcimMembership();
		if (jelajahHolcimMembership != null) {
			stmt.bindLong(83, jelajahHolcimMembership ? 1l : 0l);
		}

		String JelajahHolcimID = entity.getJelajahHolcimID();
		if (JelajahHolcimID != null) {
			stmt.bindString(84, JelajahHolcimID);
		}

		String jobTitle = entity.getJobTitle();
		if (jobTitle != null) {
			stmt.bindString(85, jobTitle);
		}

		String kecamatan = entity.getKecamatan();
		if (kecamatan != null) {
			stmt.bindString(86, kecamatan);
		}

		String kelurahan = entity.getKelurahan();
		if (kelurahan != null) {
			stmt.bindString(87, kelurahan);
		}

		String kota = entity.getKota();
		if (kota != null) {
			stmt.bindString(88, kota);
		}

		Boolean keyRetailer = entity.getKeyRetailer();
		if (keyRetailer != null) {
			stmt.bindLong(89, keyRetailer ? 1l : 0l);
		}

		String landStatus = entity.getLandStatus();
		if (landStatus != null) {
			stmt.bindString(90, landStatus);
		}

		String landmarkDescription = entity.getLandmarkDescription();
		if (landmarkDescription != null) {
			stmt.bindString(91, landmarkDescription);
		}

		String lastActualVisitDate = entity.getLastActualVisitDate();
		if (lastActualVisitDate != null) {
			stmt.bindString(92, lastActualVisitDate);
		}

		String landmarkPicture = entity.getLandmarkPicture();
		if (landmarkPicture != null) {
			stmt.bindString(93, landmarkPicture);
		}

		Double lastBuyingPrice = entity.getLastBuyingPrice();
		if (lastBuyingPrice != null) {
			stmt.bindDouble(94, lastBuyingPrice);
		}

		String lastBuyingPriceDate = entity.getLastBuyingPriceDate();
		if (lastBuyingPriceDate != null) {
			stmt.bindString(95, lastBuyingPriceDate);
		}

		Double lastBuyingVolume = entity.getLastBuyingVolume();
		if (lastBuyingVolume != null) {
			stmt.bindDouble(96, lastBuyingVolume);
		}

		String lastBuyingVolumeDate = entity.getLastBuyingVolumeDate();
		if (lastBuyingVolumeDate != null) {
			stmt.bindString(97, lastBuyingVolumeDate);
		}

		String lastDispatchDate = entity.getLastDispatchDate();
		if (lastDispatchDate != null) {
			stmt.bindString(98, lastDispatchDate);
		}

		Double lastHILBuyingVolume = entity.getLastHILBuyingVolume();
		if (lastHILBuyingVolume != null) {
			stmt.bindDouble(99, lastHILBuyingVolume);
		}

		Double lastInventory = entity.getLastInventory();
		if (lastInventory != null) {
			stmt.bindDouble(100, lastInventory);
		}

		String lastInventoryDate = entity.getLastInventoryDate();
		if (lastInventoryDate != null) {
			stmt.bindString(101, lastInventoryDate);
		}

		String lastName = entity.getLastName();
		if (lastName != null) {
			stmt.bindString(102, lastName);
		}

		String lastPlannedVisitDate = entity.getLastPlannedVisitDate();
		if (lastPlannedVisitDate != null) {
			stmt.bindString(103, lastPlannedVisitDate);
		}

		String lastRewardRedeemed = entity.getLastRewardRedeemed();
		if (lastRewardRedeemed != null) {
			stmt.bindString(104, lastRewardRedeemed);
		}

		Double lastSellingPrice = entity.getLastSellingPrice();
		if (lastSellingPrice != null) {
			stmt.bindDouble(105, lastSellingPrice);
		}

		String lastSellingPriceDate = entity.getLastSellingPriceDate();
		if (lastSellingPriceDate != null) {
			stmt.bindString(106, lastSellingPriceDate);
		}

		String latitude = entity.getLatitude();
		if (latitude != null) {
			stmt.bindString(107, latitude);
		}

		String longitude = entity.getLongitude();
		if (longitude != null) {
			stmt.bindString(108, longitude);
		}

		String mailingAddress = entity.getMailingAddress();
		if (mailingAddress != null) {
			stmt.bindString(109, mailingAddress);
		}

		String maritalStatus = entity.getMaritalStatus();
		if (maritalStatus != null) {
			stmt.bindString(110, maritalStatus);
		}

		String mobile1 = entity.getMobile1();
		if (mobile1 != null) {
			stmt.bindString(111, mobile1);
		}

		String mobile2 = entity.getMobile2();
		if (mobile2 != null) {
			stmt.bindString(112, mobile2);
		}

		String nationalId = entity.getNationalId();
		if (nationalId != null) {
			stmt.bindString(113, nationalId);
		}

		String nationality = entity.getNationality();
		if (nationality != null) {
			stmt.bindString(114, nationality);
		}

		String nextPlannedVisitDate = entity.getNextPlannedVisitDate();
		if (nextPlannedVisitDate != null) {
			stmt.bindString(115, nextPlannedVisitDate);
		}

		String notFavouriteDrink = entity.getNotFavouriteDrink();
		if (notFavouriteDrink != null) {
			stmt.bindString(116, notFavouriteDrink);
		}

		String notFavouriteFood = entity.getNotFavouriteFood();
		if (notFavouriteFood != null) {
			stmt.bindString(117, notFavouriteFood);
		}

		String Note = entity.getNote();
		if (Note != null) {
			stmt.bindString(118, Note);
		}

		String Number = entity.getNumber();
		if (Number != null) {
			stmt.bindString(119, Number);
		}

		Double numberOfPermanentEmployees = entity
				.getNumberOfPermanentEmployees();
		if (numberOfPermanentEmployees != null) {
			stmt.bindDouble(120, numberOfPermanentEmployees);
		}

		String orderDate = entity.getOrderDate();
		if (orderDate != null) {
			stmt.bindString(121, orderDate);
		}

		Double orderVolume = entity.getOrderVolume();
		if (orderVolume != null) {
			stmt.bindDouble(122, orderVolume);
		}

		String ownerContactNumber = entity.getOwnerContactNumber();
		if (ownerContactNumber != null) {
			stmt.bindString(123, ownerContactNumber);
		}

		String supplierName = entity.getSupplierName();
		if (supplierName != null) {
			stmt.bindString(124, supplierName);
		}

		String phone1 = entity.getPhone1();
		if (phone1 != null) {
			stmt.bindString(125, phone1);
		}

		String phone2 = entity.getPhone2();
		if (phone2 != null) {
			stmt.bindString(126, phone2);
		}

		String pickUp2TArmada = entity.getPickUp2TArmada();
		if (pickUp2TArmada != null) {
			stmt.bindString(127, pickUp2TArmada);
		}

		String picture = entity.getPicture();
		if (picture != null) {
			stmt.bindString(128, picture);
		}

		String postalCode = entity.getPostalCode();
		if (postalCode != null) {
			stmt.bindString(129, postalCode);
		}

		String preferredName = entity.getPreferredName();
		if (preferredName != null) {
			stmt.bindString(130, preferredName);
		}

		String preferredContactMethod = entity.getPreferredContactMethod();
		if (preferredContactMethod != null) {
			stmt.bindString(131, preferredContactMethod);
		}

		String province = entity.getProvince();
		if (province != null) {
			stmt.bindString(132, province);
		}

		String program = entity.getProgram();
		if (program != null) {
			stmt.bindString(133, program);
		}

		String programStartDate = entity.getProgramStartDate();
		if (programStartDate != null) {
			stmt.bindString(134, programStartDate);
		}

		String programEndDate = entity.getProgramEndDate();
		if (programEndDate != null) {
			stmt.bindString(135, programEndDate);
		}

		String promotion = entity.getPromotion();
		if (promotion != null) {
			stmt.bindString(136, promotion);
		}

		String promotionStartDate = entity.getPromotionStartDate();
		if (promotionStartDate != null) {
			stmt.bindString(137, promotionStartDate);
		}

		String promotionEndDate = entity.getPromotionEndDate();
		if (promotionEndDate != null) {
			stmt.bindString(138, promotionEndDate);
		}

		String reasonForNotAchievingTarget = entity
				.getReasonForNotAchievingTarget();
		if (reasonForNotAchievingTarget != null) {
			stmt.bindString(139, reasonForNotAchievingTarget);
		}

		String religion = entity.getReligion();
		if (religion != null) {
			stmt.bindString(140, religion);
		}

		Double retailerCreditLimit = entity.getRetailerCreditLimit();
		if (retailerCreditLimit != null) {
			stmt.bindDouble(141, retailerCreditLimit);
		}

		String retailerId = entity.getRetailerId();
		if (retailerId != null) {
			stmt.bindString(142, retailerId);
		}

		String retailerName = entity.getRetailerName();
		if (retailerName != null) {
			stmt.bindString(143, retailerName);
		}

		String retailerStatus = entity.getRetailerStatus();
		if (retailerStatus != null) {
			stmt.bindString(144, retailerStatus);
		}

		String retailerTermOfPayment = entity.getRetailerTermOfPayment();
		if (retailerTermOfPayment != null) {
			stmt.bindString(145, retailerTermOfPayment);
		}

		String ReasonForBuyingFromLeadCompetitor = entity
				.getReasonForBuyingFromLeadCompetitor();
		if (ReasonForBuyingFromLeadCompetitor != null) {
			stmt.bindString(146, ReasonForBuyingFromLeadCompetitor);
		}

		String ReasonForUnsatisfiedExperience = entity
				.getReasonForUnsatisfiedExperience();
		if (ReasonForUnsatisfiedExperience != null) {
			stmt.bindString(147, ReasonForUnsatisfiedExperience);
		}

		String ssCompetitorName = entity.getSsCompetitorName();
		if (ssCompetitorName != null) {
			stmt.bindString(148, ssCompetitorName);
		}

		String ssPictureDate = entity.getSsPictureDate();
		if (ssPictureDate != null) {
			stmt.bindString(149, ssPictureDate);
		}

		String ssPictureDescription = entity.getSsPictureDescription();
		if (ssPictureDescription != null) {
			stmt.bindString(150, ssPictureDescription);
		}

		String ssPicture = entity.getSsPicture();
		if (ssPicture != null) {
			stmt.bindString(151, ssPicture);
		}

		Double salesActualMTD = entity.getSalesActualMTD();
		if (salesActualMTD != null) {
			stmt.bindDouble(152, salesActualMTD);
		}

		String salesCallNote = entity.getSalesCallNote();
		if (salesCallNote != null) {
			stmt.bindString(153, salesCallNote);
		}

		String salesOfficerId = entity.getSalesOfficerId();
		if (salesOfficerId != null) {
			stmt.bindString(154, salesOfficerId);
		}

		String salesOfficer = entity.getSalesOfficer();
		if (salesOfficer != null) {
			stmt.bindString(155, salesOfficer);
		}

		Double salesTargetCurrentMonth = entity.getSalesTargetCurrentMonth();
		if (salesTargetCurrentMonth != null) {
			stmt.bindDouble(156, salesTargetCurrentMonth);
		}

		Double salesTargetMTD = entity.getSalesTargetMTD();
		if (salesTargetMTD != null) {
			stmt.bindDouble(157, salesTargetMTD);
		}

		String salesmanInChargeId = entity.getSalesmanInChargeId();
		if (salesmanInChargeId != null) {
			stmt.bindString(158, salesmanInChargeId);
		}

		String salesmanInCharge = entity.getSalesmanInCharge();
		if (salesmanInCharge != null) {
			stmt.bindString(159, salesmanInCharge);
		}

		Boolean sendAlert = entity.getSendAlert();
		if (sendAlert != null) {
			stmt.bindLong(160, sendAlert ? 1l : 0l);
		}

		String shopSignRemark = entity.getShopSignRemark();
		if (shopSignRemark != null) {
			stmt.bindString(161, shopSignRemark);
		}

		String signBoard = entity.getSignBoard();
		if (signBoard != null) {
			stmt.bindString(162, signBoard);
		}

		Integer startingYear = entity.getStartingYear();
		if (startingYear != null) {
			stmt.bindLong(163, startingYear);
		}

		String status = entity.getStatus();
		if (status != null) {
			stmt.bindString(164, status);
		}

		String streetAddress = entity.getStreetAddress();
		if (streetAddress != null) {
			stmt.bindString(165, streetAddress);
		}

		Boolean submitted = entity.getSubmitted();
		if (submitted != null) {
			stmt.bindLong(166, submitted ? 1l : 0l);
		}

		String tierKLABHistory = entity.getTierKLABHistory();
		if (tierKLABHistory != null) {
			stmt.bindString(167, tierKLABHistory);
		}

		String tierKLAB = entity.getTierKLAB();
		if (tierKLAB != null) {
			stmt.bindString(168, tierKLAB);
		}

		String title = entity.getTitle();
		if (title != null) {
			stmt.bindString(169, title);
		}

		String twentyFourTTruckArmada = entity.getTwentyFourTTruckArmada();
		if (twentyFourTTruckArmada != null) {
			stmt.bindString(170, twentyFourTTruckArmada);
		}

		Double x1stDesiredRewardPoints = entity.getX1stDesiredRewardPoints();
		if (x1stDesiredRewardPoints != null) {
			stmt.bindDouble(171, x1stDesiredRewardPoints);
		}

		String x1stDesiredReward = entity.getX1stDesiredReward();
		if (x1stDesiredReward != null) {
			stmt.bindString(172, x1stDesiredReward);
		}

		Double x2ndDesiredRewardPoints = entity.getX2ndDesiredRewardPoints();
		if (x2ndDesiredRewardPoints != null) {
			stmt.bindDouble(173, x2ndDesiredRewardPoints);
		}

		String x2ndDesiredReward = entity.getX2ndDesiredReward();
		if (x2ndDesiredReward != null) {
			stmt.bindString(174, x2ndDesiredReward);
		}

		Double x3rdDesiredRewardPoints = entity.getX3rdDesiredRewardPoints();
		if (x3rdDesiredRewardPoints != null) {
			stmt.bindDouble(175, x3rdDesiredRewardPoints);
		}

		String x3rdDesiredReward = entity.getX3rdDesiredReward();
		if (x3rdDesiredReward != null) {
			stmt.bindString(176, x3rdDesiredReward);
		}

		Boolean isProspect = entity.getIsProspect();
		if (isProspect != null) {
			stmt.bindLong(177, isProspect ? 1l : 0l);
		}

		String landmarkPictureMD5 = entity.getLandmarkPictureMD5();
		if (landmarkPictureMD5 != null) {
			stmt.bindString(178, landmarkPictureMD5);
		}

		String pictureMD5 = entity.getPictureMD5();
		if (pictureMD5 != null) {
			stmt.bindString(179, pictureMD5);
		}

		String ssPictureMD5 = entity.getSsPictureMD5();
		if (ssPictureMD5 != null) {
			stmt.bindString(180, ssPictureMD5);
		}

		String reasonForCancelling = entity.getReasonForCancelling();
		if (reasonForCancelling != null) {
			stmt.bindString(181, reasonForCancelling);
		}

		String unplannedVisitReason = entity.getUnplannedVisitReason();
		if (unplannedVisitReason != null) {
			stmt.bindString(182, unplannedVisitReason);
		}

		String checkInDateTime = entity.getCheckInDateTime();
		if (checkInDateTime != null) {
			stmt.bindString(183, checkInDateTime);
		}

		Boolean isEdited = entity.getIsEdited();
		if (isEdited != null) {
			stmt.bindLong(184, isEdited ? 1l : 0l);
		}
		stmt.bindLong(185, entity.getProspectId());
		stmt.bindLong(186, entity.getAccountId());
	}

	@Override
	protected void attachEntity(SaleExecution entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public SaleExecution readEntity(Cursor cursor, int offset) {
		SaleExecution entity = new SaleExecution(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // salesforceId
				cursor.getString(offset + 2), // visitDate
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // inspectionDate
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // availabilityOfHILShopSign
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // accountRecordType
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // visibilityOfHILShopSign
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // conditionOfShopSign
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // colorCondition
				cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // shopSign
				cursor.isNull(offset + 10) ? null : cursor
						.getString(offset + 10), // priority
				cursor.isNull(offset + 11) ? null : cursor
						.getString(offset + 11), // visibilityOfCompetitorShopSign
				cursor.isNull(offset + 12) ? null : cursor
						.getString(offset + 12), // typeOfShopSign
				cursor.isNull(offset + 13) ? null : cursor
						.getString(offset + 13), // physicalCondition
				cursor.isNull(offset + 14) ? null : cursor
						.getString(offset + 14), // cleanessCondition
				cursor.isNull(offset + 15) ? null : cursor
						.getString(offset + 15), // action
				cursor.isNull(offset + 16) ? null : cursor
						.getString(offset + 16), // actionStatus
				cursor.isNull(offset + 17) ? null : cursor
						.getString(offset + 17), // academicTitle
				cursor.isNull(offset + 18) ? null : cursor
						.getString(offset + 18), // actualVisitDate
				cursor.isNull(offset + 19) ? null : cursor
						.getString(offset + 19), // bankAccountBranch1
				cursor.isNull(offset + 20) ? null : cursor
						.getString(offset + 20), // bankAccountBranch2
				cursor.isNull(offset + 21) ? null : cursor
						.getString(offset + 21), // bankAccountBranch3
				cursor.isNull(offset + 22) ? null : cursor
						.getString(offset + 22), // bankAccountName1
				cursor.isNull(offset + 23) ? null : cursor
						.getString(offset + 23), // bankAccountName2
				cursor.isNull(offset + 24) ? null : cursor
						.getString(offset + 24), // bankAccountName3
				cursor.isNull(offset + 25) ? null : cursor
						.getString(offset + 25), // bankAccountNumber1
				cursor.isNull(offset + 26) ? null : cursor
						.getString(offset + 26), // bankAccountNumber2
				cursor.isNull(offset + 27) ? null : cursor
						.getString(offset + 27), // bankAccountNumber3
				cursor.isNull(offset + 28) ? null : cursor
						.getShort(offset + 28) != 0, // badDebt
				cursor.isNull(offset + 29) ? null : cursor
						.getString(offset + 29), // birthDate
				cursor.isNull(offset + 30) ? null : cursor
						.getString(offset + 30), // businessEntityStatus
				cursor.isNull(offset + 31) ? null : cursor
						.getString(offset + 31), // buyCompetitorName
				cursor.isNull(offset + 32) ? null : cursor
						.getString(offset + 32), // buyingVolumeCompetitorName
				cursor.isNull(offset + 33) ? null : cursor
						.getString(offset + 33), // callNote
				cursor.isNull(offset + 34) ? null : cursor
						.getDouble(offset + 34), // capacityCurrentMonth
				cursor.isNull(offset + 35) ? null : cursor
						.getString(offset + 35), // comments
				cursor.isNull(offset + 36) ? null : cursor
						.getString(offset + 36), // companyName
				cursor.isNull(offset + 37) ? null : cursor
						.getShort(offset + 37) != 0, // completed
				cursor.isNull(offset + 38) ? null : cursor
						.getString(offset + 38), // contactId
				cursor.isNull(offset + 39) ? null : cursor
						.getString(offset + 39), // contactMobile1
				cursor.isNull(offset + 40) ? null : cursor
						.getString(offset + 40), // contactMobile2
				cursor.isNull(offset + 41) ? null : cursor
						.getString(offset + 41), // contactEmail1
				cursor.isNull(offset + 42) ? null : cursor
						.getString(offset + 42), // contactName
				cursor.isNull(offset + 43) ? null : cursor
						.getString(offset + 43), // contactStatus
				cursor.isNull(offset + 44) ? null : cursor
						.getString(offset + 44), // accountName
				cursor.isNull(offset + 45) ? null : cursor
						.getString(offset + 45), // accountType
				cursor.isNull(offset + 46) ? null : cursor
						.getString(offset + 46), // customerClass
				cursor.isNull(offset + 47) ? null : cursor
						.getString(offset + 47), // deliveryRemark
				cursor.isNull(offset + 48) ? null : cursor
						.getString(offset + 48), // district
				cursor.isNull(offset + 49) ? null : cursor
						.getString(offset + 49), // eightTTruckArmada
				cursor.isNull(offset + 50) ? null : cursor
						.getString(offset + 50), // email1
				cursor.isNull(offset + 51) ? null : cursor
						.getString(offset + 51), // event
				cursor.isNull(offset + 52) ? null : cursor
						.getString(offset + 52), // extension1
				cursor.isNull(offset + 53) ? null : cursor
						.getString(offset + 53), // ExperienceWithLeadCompetitor
				cursor.isNull(offset + 54) ? null : cursor
						.getString(offset + 54), // favouriteActivities
				cursor.isNull(offset + 55) ? null : cursor
						.getString(offset + 55), // favouriteDrink
				cursor.isNull(offset + 56) ? null : cursor
						.getString(offset + 56), // favouriteFood
				cursor.isNull(offset + 57) ? null : cursor
						.getString(offset + 57), // favouriteSports
				cursor.isNull(offset + 58) ? null : cursor
						.getString(offset + 58), // fax1
				cursor.isNull(offset + 59) ? null : cursor
						.getString(offset + 59), // firstName
				cursor.isNull(offset + 60) ? null : cursor
						.getString(offset + 60), // gender
				cursor.isNull(offset + 61) ? null : cursor
						.getString(offset + 61), // hilBuyingPriceDate
				cursor.isNull(offset + 62) ? null : cursor
						.getDouble(offset + 62), // hilBuyingPrice
				cursor.isNull(offset + 63) ? null : cursor
						.getString(offset + 63), // hilBuyingVolumeDate
				cursor.isNull(offset + 64) ? null : cursor
						.getDouble(offset + 64), // hilBuyingVolume
				cursor.isNull(offset + 65) ? null : cursor
						.getString(offset + 65), // hilBuyingInventoryPriceDate
				cursor.isNull(offset + 66) ? null : cursor
						.getDouble(offset + 66), // hilBuyingInventoryPrice
				cursor.isNull(offset + 67) ? null : cursor
						.getString(offset + 67), // hilBuyingSellingPriceDate
				cursor.isNull(offset + 68) ? null : cursor
						.getDouble(offset + 68), // hilBuyingSellingPrice
				cursor.isNull(offset + 69) ? null : cursor
						.getDouble(offset + 69), // hilSoWCurrentMonth
				cursor.isNull(offset + 70) ? null : cursor
						.getDouble(offset + 70), // hmhilBuyingPrice
				cursor.isNull(offset + 71) ? null : cursor
						.getDouble(offset + 71), // hmhilInventory
				cursor.isNull(offset + 72) ? null : cursor
						.getDouble(offset + 72), // hmhilSellingPrice
				cursor.isNull(offset + 73) ? null : cursor
						.getShort(offset + 73) != 0, // hvlStockStatus
				cursor.isNull(offset + 74) ? null : cursor
						.getDouble(offset + 74), // hvlStockVolumeTonMonth
				cursor.isNull(offset + 75) ? null : cursor
						.getString(offset + 75), // hobbies
				cursor.isNull(offset + 76) ? null : cursor
						.getDouble(offset + 76), // holcimeterBalance
				cursor.isNull(offset + 77) ? null : cursor
						.getDouble(offset + 77), // holcimeterBonus
				cursor.isNull(offset + 78) ? null : cursor
						.getDouble(offset + 78), // holcimeterTotal
				cursor.isNull(offset + 79) ? null : cursor
						.getString(offset + 79), // invCompetitorName
				cursor.isNull(offset + 80) ? null : cursor
						.getShort(offset + 80) != 0, // isDSR
				cursor.isNull(offset + 81) ? null : cursor
						.getShort(offset + 81) != 0, // isFinished
				cursor.isNull(offset + 82) ? null : cursor
						.getShort(offset + 82) != 0, // jelajahHolcimMembership
				cursor.isNull(offset + 83) ? null : cursor
						.getString(offset + 83), // JelajahHolcimID
				cursor.isNull(offset + 84) ? null : cursor
						.getString(offset + 84), // jobTitle
				cursor.isNull(offset + 85) ? null : cursor
						.getString(offset + 85), // kecamatan
				cursor.isNull(offset + 86) ? null : cursor
						.getString(offset + 86), // kelurahan
				cursor.isNull(offset + 87) ? null : cursor
						.getString(offset + 87), // kota
				cursor.isNull(offset + 88) ? null : cursor
						.getShort(offset + 88) != 0, // keyRetailer
				cursor.isNull(offset + 89) ? null : cursor
						.getString(offset + 89), // landStatus
				cursor.isNull(offset + 90) ? null : cursor
						.getString(offset + 90), // landmarkDescription
				cursor.isNull(offset + 91) ? null : cursor
						.getString(offset + 91), // lastActualVisitDate
				cursor.isNull(offset + 92) ? null : cursor
						.getString(offset + 92), // landmarkPicture
				cursor.isNull(offset + 93) ? null : cursor
						.getDouble(offset + 93), // lastBuyingPrice
				cursor.isNull(offset + 94) ? null : cursor
						.getString(offset + 94), // lastBuyingPriceDate
				cursor.isNull(offset + 95) ? null : cursor
						.getDouble(offset + 95), // lastBuyingVolume
				cursor.isNull(offset + 96) ? null : cursor
						.getString(offset + 96), // lastBuyingVolumeDate
				cursor.isNull(offset + 97) ? null : cursor
						.getString(offset + 97), // lastDispatchDate
				cursor.isNull(offset + 98) ? null : cursor
						.getDouble(offset + 98), // lastHILBuyingVolume
				cursor.isNull(offset + 99) ? null : cursor
						.getDouble(offset + 99), // lastInventory
				cursor.isNull(offset + 100) ? null : cursor
						.getString(offset + 100), // lastInventoryDate
				cursor.isNull(offset + 101) ? null : cursor
						.getString(offset + 101), // lastName
				cursor.isNull(offset + 102) ? null : cursor
						.getString(offset + 102), // lastPlannedVisitDate
				cursor.isNull(offset + 103) ? null : cursor
						.getString(offset + 103), // lastRewardRedeemed
				cursor.isNull(offset + 104) ? null : cursor
						.getDouble(offset + 104), // lastSellingPrice
				cursor.isNull(offset + 105) ? null : cursor
						.getString(offset + 105), // lastSellingPriceDate
				cursor.isNull(offset + 106) ? null : cursor
						.getString(offset + 106), // latitude
				cursor.isNull(offset + 107) ? null : cursor
						.getString(offset + 107), // longitude
				cursor.isNull(offset + 108) ? null : cursor
						.getString(offset + 108), // mailingAddress
				cursor.isNull(offset + 109) ? null : cursor
						.getString(offset + 109), // maritalStatus
				cursor.isNull(offset + 110) ? null : cursor
						.getString(offset + 110), // mobile1
				cursor.isNull(offset + 111) ? null : cursor
						.getString(offset + 111), // mobile2
				cursor.isNull(offset + 112) ? null : cursor
						.getString(offset + 112), // nationalId
				cursor.isNull(offset + 113) ? null : cursor
						.getString(offset + 113), // nationality
				cursor.isNull(offset + 114) ? null : cursor
						.getString(offset + 114), // nextPlannedVisitDate
				cursor.isNull(offset + 115) ? null : cursor
						.getString(offset + 115), // notFavouriteDrink
				cursor.isNull(offset + 116) ? null : cursor
						.getString(offset + 116), // notFavouriteFood
				cursor.isNull(offset + 117) ? null : cursor
						.getString(offset + 117), // Note
				cursor.isNull(offset + 118) ? null : cursor
						.getString(offset + 118), // Number
				cursor.isNull(offset + 119) ? null : cursor
						.getDouble(offset + 119), // numberOfPermanentEmployees
				cursor.isNull(offset + 120) ? null : cursor
						.getString(offset + 120), // orderDate
				cursor.isNull(offset + 121) ? null : cursor
						.getDouble(offset + 121), // orderVolume
				cursor.isNull(offset + 122) ? null : cursor
						.getString(offset + 122), // ownerContactNumber
				cursor.isNull(offset + 123) ? null : cursor
						.getString(offset + 123), // supplierName
				cursor.isNull(offset + 124) ? null : cursor
						.getString(offset + 124), // phone1
				cursor.isNull(offset + 125) ? null : cursor
						.getString(offset + 125), // phone2
				cursor.isNull(offset + 126) ? null : cursor
						.getString(offset + 126), // pickUp2TArmada
				cursor.isNull(offset + 127) ? null : cursor
						.getString(offset + 127), // picture
				cursor.isNull(offset + 128) ? null : cursor
						.getString(offset + 128), // postalCode
				cursor.isNull(offset + 129) ? null : cursor
						.getString(offset + 129), // preferredName
				cursor.isNull(offset + 130) ? null : cursor
						.getString(offset + 130), // preferredContactMethod
				cursor.isNull(offset + 131) ? null : cursor
						.getString(offset + 131), // province
				cursor.isNull(offset + 132) ? null : cursor
						.getString(offset + 132), // program
				cursor.isNull(offset + 133) ? null : cursor
						.getString(offset + 133), // programStartDate
				cursor.isNull(offset + 134) ? null : cursor
						.getString(offset + 134), // programEndDate
				cursor.isNull(offset + 135) ? null : cursor
						.getString(offset + 135), // promotion
				cursor.isNull(offset + 136) ? null : cursor
						.getString(offset + 136), // promotionStartDate
				cursor.isNull(offset + 137) ? null : cursor
						.getString(offset + 137), // promotionEndDate
				cursor.isNull(offset + 138) ? null : cursor
						.getString(offset + 138), // reasonForNotAchievingTarget
				cursor.isNull(offset + 139) ? null : cursor
						.getString(offset + 139), // religion
				cursor.isNull(offset + 140) ? null : cursor
						.getDouble(offset + 140), // retailerCreditLimit
				cursor.isNull(offset + 141) ? null : cursor
						.getString(offset + 141), // retailerId
				cursor.isNull(offset + 142) ? null : cursor
						.getString(offset + 142), // retailerName
				cursor.isNull(offset + 143) ? null : cursor
						.getString(offset + 143), // retailerStatus
				cursor.isNull(offset + 144) ? null : cursor
						.getString(offset + 144), // retailerTermOfPayment
				cursor.isNull(offset + 145) ? null : cursor
						.getString(offset + 145), // ReasonForBuyingFromLeadCompetitor
				cursor.isNull(offset + 146) ? null : cursor
						.getString(offset + 146), // ReasonForUnsatisfiedExperience
				cursor.isNull(offset + 147) ? null : cursor
						.getString(offset + 147), // ssCompetitorName
				cursor.isNull(offset + 148) ? null : cursor
						.getString(offset + 148), // ssPictureDate
				cursor.isNull(offset + 149) ? null : cursor
						.getString(offset + 149), // ssPictureDescription
				cursor.isNull(offset + 150) ? null : cursor
						.getString(offset + 150), // ssPicture
				cursor.isNull(offset + 151) ? null : cursor
						.getDouble(offset + 151), // salesActualMTD
				cursor.isNull(offset + 152) ? null : cursor
						.getString(offset + 152), // salesCallNote
				cursor.isNull(offset + 153) ? null : cursor
						.getString(offset + 153), // salesOfficerId
				cursor.isNull(offset + 154) ? null : cursor
						.getString(offset + 154), // salesOfficer
				cursor.isNull(offset + 155) ? null : cursor
						.getDouble(offset + 155), // salesTargetCurrentMonth
				cursor.isNull(offset + 156) ? null : cursor
						.getDouble(offset + 156), // salesTargetMTD
				cursor.isNull(offset + 157) ? null : cursor
						.getString(offset + 157), // salesmanInChargeId
				cursor.isNull(offset + 158) ? null : cursor
						.getString(offset + 158), // salesmanInCharge
				cursor.isNull(offset + 159) ? null : cursor
						.getShort(offset + 159) != 0, // sendAlert
				cursor.isNull(offset + 160) ? null : cursor
						.getString(offset + 160), // shopSignRemark
				cursor.isNull(offset + 161) ? null : cursor
						.getString(offset + 161), // signBoard
				cursor.isNull(offset + 162) ? null : cursor
						.getInt(offset + 162), // startingYear
				cursor.isNull(offset + 163) ? null : cursor
						.getString(offset + 163), // status
				cursor.isNull(offset + 164) ? null : cursor
						.getString(offset + 164), // streetAddress
				cursor.isNull(offset + 165) ? null : cursor
						.getShort(offset + 165) != 0, // submitted
				cursor.isNull(offset + 166) ? null : cursor
						.getString(offset + 166), // tierKLABHistory
				cursor.isNull(offset + 167) ? null : cursor
						.getString(offset + 167), // tierKLAB
				cursor.isNull(offset + 168) ? null : cursor
						.getString(offset + 168), // title
				cursor.isNull(offset + 169) ? null : cursor
						.getString(offset + 169), // twentyFourTTruckArmada
				cursor.isNull(offset + 170) ? null : cursor
						.getDouble(offset + 170), // x1stDesiredRewardPoints
				cursor.isNull(offset + 171) ? null : cursor
						.getString(offset + 171), // x1stDesiredReward
				cursor.isNull(offset + 172) ? null : cursor
						.getDouble(offset + 172), // x2ndDesiredRewardPoints
				cursor.isNull(offset + 173) ? null : cursor
						.getString(offset + 173), // x2ndDesiredReward
				cursor.isNull(offset + 174) ? null : cursor
						.getDouble(offset + 174), // x3rdDesiredRewardPoints
				cursor.isNull(offset + 175) ? null : cursor
						.getString(offset + 175), // x3rdDesiredReward
				cursor.isNull(offset + 176) ? null : cursor
						.getShort(offset + 176) != 0, // isProspect
				cursor.isNull(offset + 177) ? null : cursor
						.getString(offset + 177), // landmarkPictureMD5
				cursor.isNull(offset + 178) ? null : cursor
						.getString(offset + 178), // pictureMD5
				cursor.isNull(offset + 179) ? null : cursor
						.getString(offset + 179), // ssPictureMD5
				cursor.isNull(offset + 180) ? null : cursor
						.getString(offset + 180), // reasonForCancelling
				cursor.isNull(offset + 181) ? null : cursor
						.getString(offset + 181), // unplannedVisitReason
				cursor.isNull(offset + 182) ? null : cursor
						.getString(offset + 182), // checkInDateTime
				cursor.isNull(offset + 183) ? null : cursor
						.getShort(offset + 183) != 0, // isEdited
				cursor.getLong(offset + 184), // prospectId
				cursor.getLong(offset + 185) // accountId
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, SaleExecution entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setSalesforceId(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setVisitDate(cursor.getString(offset + 2));
		entity.setInspectionDate(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setAvailabilityOfHILShopSign(cursor.isNull(offset + 4) ? null
				: cursor.getString(offset + 4));
		entity.setAccountRecordType(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setVisibilityOfHILShopSign(cursor.isNull(offset + 6) ? null
				: cursor.getString(offset + 6));
		entity.setConditionOfShopSign(cursor.isNull(offset + 7) ? null : cursor
				.getString(offset + 7));
		entity.setColorCondition(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
		entity.setShopSign(cursor.isNull(offset + 9) ? null : cursor
				.getString(offset + 9));
		entity.setPriority(cursor.isNull(offset + 10) ? null : cursor
				.getString(offset + 10));
		entity.setVisibilityOfCompetitorShopSign(cursor.isNull(offset + 11) ? null
				: cursor.getString(offset + 11));
		entity.setTypeOfShopSign(cursor.isNull(offset + 12) ? null : cursor
				.getString(offset + 12));
		entity.setPhysicalCondition(cursor.isNull(offset + 13) ? null : cursor
				.getString(offset + 13));
		entity.setCleanessCondition(cursor.isNull(offset + 14) ? null : cursor
				.getString(offset + 14));
		entity.setAction(cursor.isNull(offset + 15) ? null : cursor
				.getString(offset + 15));
		entity.setActionStatus(cursor.isNull(offset + 16) ? null : cursor
				.getString(offset + 16));
		entity.setAcademicTitle(cursor.isNull(offset + 17) ? null : cursor
				.getString(offset + 17));
		entity.setActualVisitDate(cursor.isNull(offset + 18) ? null : cursor
				.getString(offset + 18));
		entity.setBankAccountBranch1(cursor.isNull(offset + 19) ? null : cursor
				.getString(offset + 19));
		entity.setBankAccountBranch2(cursor.isNull(offset + 20) ? null : cursor
				.getString(offset + 20));
		entity.setBankAccountBranch3(cursor.isNull(offset + 21) ? null : cursor
				.getString(offset + 21));
		entity.setBankAccountName1(cursor.isNull(offset + 22) ? null : cursor
				.getString(offset + 22));
		entity.setBankAccountName2(cursor.isNull(offset + 23) ? null : cursor
				.getString(offset + 23));
		entity.setBankAccountName3(cursor.isNull(offset + 24) ? null : cursor
				.getString(offset + 24));
		entity.setBankAccountNumber1(cursor.isNull(offset + 25) ? null : cursor
				.getString(offset + 25));
		entity.setBankAccountNumber2(cursor.isNull(offset + 26) ? null : cursor
				.getString(offset + 26));
		entity.setBankAccountNumber3(cursor.isNull(offset + 27) ? null : cursor
				.getString(offset + 27));
		entity.setBadDebt(cursor.isNull(offset + 28) ? null : cursor
				.getShort(offset + 28) != 0);
		entity.setBirthDate(cursor.isNull(offset + 29) ? null : cursor
				.getString(offset + 29));
		entity.setBusinessEntityStatus(cursor.isNull(offset + 30) ? null
				: cursor.getString(offset + 30));
		entity.setBuyCompetitorName(cursor.isNull(offset + 31) ? null : cursor
				.getString(offset + 31));
		entity.setBuyingVolumeCompetitorName(cursor.isNull(offset + 32) ? null
				: cursor.getString(offset + 32));
		entity.setCallNote(cursor.isNull(offset + 33) ? null : cursor
				.getString(offset + 33));
		entity.setCapacityCurrentMonth(cursor.isNull(offset + 34) ? null
				: cursor.getDouble(offset + 34));
		entity.setComments(cursor.isNull(offset + 35) ? null : cursor
				.getString(offset + 35));
		entity.setCompanyName(cursor.isNull(offset + 36) ? null : cursor
				.getString(offset + 36));
		entity.setCompleted(cursor.isNull(offset + 37) ? null : cursor
				.getShort(offset + 37) != 0);
		entity.setContactId(cursor.isNull(offset + 38) ? null : cursor
				.getString(offset + 38));
		entity.setContactMobile1(cursor.isNull(offset + 39) ? null : cursor
				.getString(offset + 39));
		entity.setContactMobile2(cursor.isNull(offset + 40) ? null : cursor
				.getString(offset + 40));
		entity.setContactEmail1(cursor.isNull(offset + 41) ? null : cursor
				.getString(offset + 41));
		entity.setContactName(cursor.isNull(offset + 42) ? null : cursor
				.getString(offset + 42));
		entity.setContactStatus(cursor.isNull(offset + 43) ? null : cursor
				.getString(offset + 43));
		entity.setAccountName(cursor.isNull(offset + 44) ? null : cursor
				.getString(offset + 44));
		entity.setAccountType(cursor.isNull(offset + 45) ? null : cursor
				.getString(offset + 45));
		entity.setCustomerClass(cursor.isNull(offset + 46) ? null : cursor
				.getString(offset + 46));
		entity.setDeliveryRemark(cursor.isNull(offset + 47) ? null : cursor
				.getString(offset + 47));
		entity.setDistrict(cursor.isNull(offset + 48) ? null : cursor
				.getString(offset + 48));
		entity.setEightTTruckArmada(cursor.isNull(offset + 49) ? null : cursor
				.getString(offset + 49));
		entity.setEmail1(cursor.isNull(offset + 50) ? null : cursor
				.getString(offset + 50));
		entity.setEvent(cursor.isNull(offset + 51) ? null : cursor
				.getString(offset + 51));
		entity.setExtension1(cursor.isNull(offset + 52) ? null : cursor
				.getString(offset + 52));
		entity.setExperienceWithLeadCompetitor(cursor.isNull(offset + 53) ? null
				: cursor.getString(offset + 53));
		entity.setFavouriteActivities(cursor.isNull(offset + 54) ? null
				: cursor.getString(offset + 54));
		entity.setFavouriteDrink(cursor.isNull(offset + 55) ? null : cursor
				.getString(offset + 55));
		entity.setFavouriteFood(cursor.isNull(offset + 56) ? null : cursor
				.getString(offset + 56));
		entity.setFavouriteSports(cursor.isNull(offset + 57) ? null : cursor
				.getString(offset + 57));
		entity.setFax1(cursor.isNull(offset + 58) ? null : cursor
				.getString(offset + 58));
		entity.setFirstName(cursor.isNull(offset + 59) ? null : cursor
				.getString(offset + 59));
		entity.setGender(cursor.isNull(offset + 60) ? null : cursor
				.getString(offset + 60));
		entity.setHilBuyingPriceDate(cursor.isNull(offset + 61) ? null : cursor
				.getString(offset + 61));
		entity.setHilBuyingPrice(cursor.isNull(offset + 62) ? null : cursor
				.getDouble(offset + 62));
		entity.setHilBuyingVolumeDate(cursor.isNull(offset + 63) ? null
				: cursor.getString(offset + 63));
		entity.setHilBuyingVolume(cursor.isNull(offset + 64) ? null : cursor
				.getDouble(offset + 64));
		entity.setHilBuyingInventoryPriceDate(cursor.isNull(offset + 65) ? null
				: cursor.getString(offset + 65));
		entity.setHilBuyingInventoryPrice(cursor.isNull(offset + 66) ? null
				: cursor.getDouble(offset + 66));
		entity.setHilBuyingSellingPriceDate(cursor.isNull(offset + 67) ? null
				: cursor.getString(offset + 67));
		entity.setHilBuyingSellingPrice(cursor.isNull(offset + 68) ? null
				: cursor.getDouble(offset + 68));
		entity.setHilSoWCurrentMonth(cursor.isNull(offset + 69) ? null : cursor
				.getDouble(offset + 69));
		entity.setHmhilBuyingPrice(cursor.isNull(offset + 70) ? null : cursor
				.getDouble(offset + 70));
		entity.setHmhilInventory(cursor.isNull(offset + 71) ? null : cursor
				.getDouble(offset + 71));
		entity.setHmhilSellingPrice(cursor.isNull(offset + 72) ? null : cursor
				.getDouble(offset + 72));
		entity.setHvlStockStatus(cursor.isNull(offset + 73) ? null : cursor
				.getShort(offset + 73) != 0);
		entity.setHvlStockVolumeTonMonth(cursor.isNull(offset + 74) ? null
				: cursor.getDouble(offset + 74));
		entity.setHobbies(cursor.isNull(offset + 75) ? null : cursor
				.getString(offset + 75));
		entity.setHolcimeterBalance(cursor.isNull(offset + 76) ? null : cursor
				.getDouble(offset + 76));
		entity.setHolcimeterBonus(cursor.isNull(offset + 77) ? null : cursor
				.getDouble(offset + 77));
		entity.setHolcimeterTotal(cursor.isNull(offset + 78) ? null : cursor
				.getDouble(offset + 78));
		entity.setInvCompetitorName(cursor.isNull(offset + 79) ? null : cursor
				.getString(offset + 79));
		entity.setIsDSR(cursor.isNull(offset + 80) ? null : cursor
				.getShort(offset + 80) != 0);
		entity.setIsFinished(cursor.isNull(offset + 81) ? null : cursor
				.getShort(offset + 81) != 0);
		entity.setJelajahHolcimMembership(cursor.isNull(offset + 82) ? null
				: cursor.getShort(offset + 82) != 0);
		entity.setJelajahHolcimID(cursor.isNull(offset + 83) ? null : cursor
				.getString(offset + 83));
		entity.setJobTitle(cursor.isNull(offset + 84) ? null : cursor
				.getString(offset + 84));
		entity.setKecamatan(cursor.isNull(offset + 85) ? null : cursor
				.getString(offset + 85));
		entity.setKelurahan(cursor.isNull(offset + 86) ? null : cursor
				.getString(offset + 86));
		entity.setKota(cursor.isNull(offset + 87) ? null : cursor
				.getString(offset + 87));
		entity.setKeyRetailer(cursor.isNull(offset + 88) ? null : cursor
				.getShort(offset + 88) != 0);
		entity.setLandStatus(cursor.isNull(offset + 89) ? null : cursor
				.getString(offset + 89));
		entity.setLandmarkDescription(cursor.isNull(offset + 90) ? null
				: cursor.getString(offset + 90));
		entity.setLastActualVisitDate(cursor.isNull(offset + 91) ? null
				: cursor.getString(offset + 91));
		entity.setLandmarkPicture(cursor.isNull(offset + 92) ? null : cursor
				.getString(offset + 92));
		entity.setLastBuyingPrice(cursor.isNull(offset + 93) ? null : cursor
				.getDouble(offset + 93));
		entity.setLastBuyingPriceDate(cursor.isNull(offset + 94) ? null
				: cursor.getString(offset + 94));
		entity.setLastBuyingVolume(cursor.isNull(offset + 95) ? null : cursor
				.getDouble(offset + 95));
		entity.setLastBuyingVolumeDate(cursor.isNull(offset + 96) ? null
				: cursor.getString(offset + 96));
		entity.setLastDispatchDate(cursor.isNull(offset + 97) ? null : cursor
				.getString(offset + 97));
		entity.setLastHILBuyingVolume(cursor.isNull(offset + 98) ? null
				: cursor.getDouble(offset + 98));
		entity.setLastInventory(cursor.isNull(offset + 99) ? null : cursor
				.getDouble(offset + 99));
		entity.setLastInventoryDate(cursor.isNull(offset + 100) ? null : cursor
				.getString(offset + 100));
		entity.setLastName(cursor.isNull(offset + 101) ? null : cursor
				.getString(offset + 101));
		entity.setLastPlannedVisitDate(cursor.isNull(offset + 102) ? null
				: cursor.getString(offset + 102));
		entity.setLastRewardRedeemed(cursor.isNull(offset + 103) ? null
				: cursor.getString(offset + 103));
		entity.setLastSellingPrice(cursor.isNull(offset + 104) ? null : cursor
				.getDouble(offset + 104));
		entity.setLastSellingPriceDate(cursor.isNull(offset + 105) ? null
				: cursor.getString(offset + 105));
		entity.setLatitude(cursor.isNull(offset + 106) ? null : cursor
				.getString(offset + 106));
		entity.setLongitude(cursor.isNull(offset + 107) ? null : cursor
				.getString(offset + 107));
		entity.setMailingAddress(cursor.isNull(offset + 108) ? null : cursor
				.getString(offset + 108));
		entity.setMaritalStatus(cursor.isNull(offset + 109) ? null : cursor
				.getString(offset + 109));
		entity.setMobile1(cursor.isNull(offset + 110) ? null : cursor
				.getString(offset + 110));
		entity.setMobile2(cursor.isNull(offset + 111) ? null : cursor
				.getString(offset + 111));
		entity.setNationalId(cursor.isNull(offset + 112) ? null : cursor
				.getString(offset + 112));
		entity.setNationality(cursor.isNull(offset + 113) ? null : cursor
				.getString(offset + 113));
		entity.setNextPlannedVisitDate(cursor.isNull(offset + 114) ? null
				: cursor.getString(offset + 114));
		entity.setNotFavouriteDrink(cursor.isNull(offset + 115) ? null : cursor
				.getString(offset + 115));
		entity.setNotFavouriteFood(cursor.isNull(offset + 116) ? null : cursor
				.getString(offset + 116));
		entity.setNote(cursor.isNull(offset + 117) ? null : cursor
				.getString(offset + 117));
		entity.setNumber(cursor.isNull(offset + 118) ? null : cursor
				.getString(offset + 118));
		entity.setNumberOfPermanentEmployees(cursor.isNull(offset + 119) ? null
				: cursor.getDouble(offset + 119));
		entity.setOrderDate(cursor.isNull(offset + 120) ? null : cursor
				.getString(offset + 120));
		entity.setOrderVolume(cursor.isNull(offset + 121) ? null : cursor
				.getDouble(offset + 121));
		entity.setOwnerContactNumber(cursor.isNull(offset + 122) ? null
				: cursor.getString(offset + 122));
		entity.setSupplierName(cursor.isNull(offset + 123) ? null : cursor
				.getString(offset + 123));
		entity.setPhone1(cursor.isNull(offset + 124) ? null : cursor
				.getString(offset + 124));
		entity.setPhone2(cursor.isNull(offset + 125) ? null : cursor
				.getString(offset + 125));
		entity.setPickUp2TArmada(cursor.isNull(offset + 126) ? null : cursor
				.getString(offset + 126));
		entity.setPicture(cursor.isNull(offset + 127) ? null : cursor
				.getString(offset + 127));
		entity.setPostalCode(cursor.isNull(offset + 128) ? null : cursor
				.getString(offset + 128));
		entity.setPreferredName(cursor.isNull(offset + 129) ? null : cursor
				.getString(offset + 129));
		entity.setPreferredContactMethod(cursor.isNull(offset + 130) ? null
				: cursor.getString(offset + 130));
		entity.setProvince(cursor.isNull(offset + 131) ? null : cursor
				.getString(offset + 131));
		entity.setProgram(cursor.isNull(offset + 132) ? null : cursor
				.getString(offset + 132));
		entity.setProgramStartDate(cursor.isNull(offset + 133) ? null : cursor
				.getString(offset + 133));
		entity.setProgramEndDate(cursor.isNull(offset + 134) ? null : cursor
				.getString(offset + 134));
		entity.setPromotion(cursor.isNull(offset + 135) ? null : cursor
				.getString(offset + 135));
		entity.setPromotionStartDate(cursor.isNull(offset + 136) ? null
				: cursor.getString(offset + 136));
		entity.setPromotionEndDate(cursor.isNull(offset + 137) ? null : cursor
				.getString(offset + 137));
		entity.setReasonForNotAchievingTarget(cursor.isNull(offset + 138) ? null
				: cursor.getString(offset + 138));
		entity.setReligion(cursor.isNull(offset + 139) ? null : cursor
				.getString(offset + 139));
		entity.setRetailerCreditLimit(cursor.isNull(offset + 140) ? null
				: cursor.getDouble(offset + 140));
		entity.setRetailerId(cursor.isNull(offset + 141) ? null : cursor
				.getString(offset + 141));
		entity.setRetailerName(cursor.isNull(offset + 142) ? null : cursor
				.getString(offset + 142));
		entity.setRetailerStatus(cursor.isNull(offset + 143) ? null : cursor
				.getString(offset + 143));
		entity.setRetailerTermOfPayment(cursor.isNull(offset + 144) ? null
				: cursor.getString(offset + 144));
		entity.setReasonForBuyingFromLeadCompetitor(cursor.isNull(offset + 145) ? null
				: cursor.getString(offset + 145));
		entity.setReasonForUnsatisfiedExperience(cursor.isNull(offset + 146) ? null
				: cursor.getString(offset + 146));
		entity.setSsCompetitorName(cursor.isNull(offset + 147) ? null : cursor
				.getString(offset + 147));
		entity.setSsPictureDate(cursor.isNull(offset + 148) ? null : cursor
				.getString(offset + 148));
		entity.setSsPictureDescription(cursor.isNull(offset + 149) ? null
				: cursor.getString(offset + 149));
		entity.setSsPicture(cursor.isNull(offset + 150) ? null : cursor
				.getString(offset + 150));
		entity.setSalesActualMTD(cursor.isNull(offset + 151) ? null : cursor
				.getDouble(offset + 151));
		entity.setSalesCallNote(cursor.isNull(offset + 152) ? null : cursor
				.getString(offset + 152));
		entity.setSalesOfficerId(cursor.isNull(offset + 153) ? null : cursor
				.getString(offset + 153));
		entity.setSalesOfficer(cursor.isNull(offset + 154) ? null : cursor
				.getString(offset + 154));
		entity.setSalesTargetCurrentMonth(cursor.isNull(offset + 155) ? null
				: cursor.getDouble(offset + 155));
		entity.setSalesTargetMTD(cursor.isNull(offset + 156) ? null : cursor
				.getDouble(offset + 156));
		entity.setSalesmanInChargeId(cursor.isNull(offset + 157) ? null
				: cursor.getString(offset + 157));
		entity.setSalesmanInCharge(cursor.isNull(offset + 158) ? null : cursor
				.getString(offset + 158));
		entity.setSendAlert(cursor.isNull(offset + 159) ? null : cursor
				.getShort(offset + 159) != 0);
		entity.setShopSignRemark(cursor.isNull(offset + 160) ? null : cursor
				.getString(offset + 160));
		entity.setSignBoard(cursor.isNull(offset + 161) ? null : cursor
				.getString(offset + 161));
		entity.setStartingYear(cursor.isNull(offset + 162) ? null : cursor
				.getInt(offset + 162));
		entity.setStatus(cursor.isNull(offset + 163) ? null : cursor
				.getString(offset + 163));
		entity.setStreetAddress(cursor.isNull(offset + 164) ? null : cursor
				.getString(offset + 164));
		entity.setSubmitted(cursor.isNull(offset + 165) ? null : cursor
				.getShort(offset + 165) != 0);
		entity.setTierKLABHistory(cursor.isNull(offset + 166) ? null : cursor
				.getString(offset + 166));
		entity.setTierKLAB(cursor.isNull(offset + 167) ? null : cursor
				.getString(offset + 167));
		entity.setTitle(cursor.isNull(offset + 168) ? null : cursor
				.getString(offset + 168));
		entity.setTwentyFourTTruckArmada(cursor.isNull(offset + 169) ? null
				: cursor.getString(offset + 169));
		entity.setX1stDesiredRewardPoints(cursor.isNull(offset + 170) ? null
				: cursor.getDouble(offset + 170));
		entity.setX1stDesiredReward(cursor.isNull(offset + 171) ? null : cursor
				.getString(offset + 171));
		entity.setX2ndDesiredRewardPoints(cursor.isNull(offset + 172) ? null
				: cursor.getDouble(offset + 172));
		entity.setX2ndDesiredReward(cursor.isNull(offset + 173) ? null : cursor
				.getString(offset + 173));
		entity.setX3rdDesiredRewardPoints(cursor.isNull(offset + 174) ? null
				: cursor.getDouble(offset + 174));
		entity.setX3rdDesiredReward(cursor.isNull(offset + 175) ? null : cursor
				.getString(offset + 175));
		entity.setIsProspect(cursor.isNull(offset + 176) ? null : cursor
				.getShort(offset + 176) != 0);
		entity.setLandmarkPictureMD5(cursor.isNull(offset + 177) ? null
				: cursor.getString(offset + 177));
		entity.setPictureMD5(cursor.isNull(offset + 178) ? null : cursor
				.getString(offset + 178));
		entity.setSsPictureMD5(cursor.isNull(offset + 179) ? null : cursor
				.getString(offset + 179));
		entity.setReasonForCancelling(cursor.isNull(offset + 180) ? null
				: cursor.getString(offset + 180));
		entity.setUnplannedVisitReason(cursor.isNull(offset + 181) ? null
				: cursor.getString(offset + 181));
		entity.setCheckInDateTime(cursor.isNull(offset + 182) ? null : cursor
				.getString(offset + 182));
		entity.setIsEdited(cursor.isNull(offset + 183) ? null : cursor
				.getShort(offset + 183) != 0);
		entity.setProspectId(cursor.getLong(offset + 184));
		entity.setAccountId(cursor.getLong(offset + 185));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(SaleExecution entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(SaleExecution entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/**
	 * Internal query to resolve the "saleExecutions" to-many relationship of
	 * Prospect.
	 */
	public List<SaleExecution> _queryProspect_SaleExecutions(long prospectId) {
		synchronized (this) {
			if (prospect_SaleExecutionsQuery == null) {
				QueryBuilder<SaleExecution> queryBuilder = queryBuilder();
				queryBuilder.where(Properties.ProspectId.eq(null));
				prospect_SaleExecutionsQuery = queryBuilder.build();
			}
		}
		Query<SaleExecution> query = prospect_SaleExecutionsQuery
				.forCurrentThread();
		query.setParameter(0, prospectId);
		return query.list();
	}

	/**
	 * Internal query to resolve the "saleExecutions" to-many relationship of
	 * Account.
	 */
	public List<SaleExecution> _queryAccount_SaleExecutions(long accountId) {
		synchronized (this) {
			if (account_SaleExecutionsQuery == null) {
				QueryBuilder<SaleExecution> queryBuilder = queryBuilder();
				queryBuilder.where(Properties.AccountId.eq(null));
				account_SaleExecutionsQuery = queryBuilder.build();
			}
		}
		Query<SaleExecution> query = account_SaleExecutionsQuery
				.forCurrentThread();
		query.setParameter(0, accountId);
		return query.list();
	}

	private String selectDeep;

	protected String getSelectDeep() {
		if (selectDeep == null) {
			StringBuilder builder = new StringBuilder("SELECT ");
			SqlUtils.appendColumns(builder, "T", getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T0", daoSession.getProspectDao()
					.getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T1", daoSession.getAccountDao()
					.getAllColumns());
			builder.append(" FROM SALE_EXECUTION T");
			builder.append(" LEFT JOIN PROSPECT T0 ON T.'PROSPECT_ID'=T0.'_id'");
			builder.append(" LEFT JOIN ACCOUNT T1 ON T.'ACCOUNT_ID'=T1.'_id'");
			builder.append(' ');
			selectDeep = builder.toString();
		}
		return selectDeep;
	}

	protected SaleExecution loadCurrentDeep(Cursor cursor, boolean lock) {
		SaleExecution entity = loadCurrent(cursor, 0, lock);
		int offset = getAllColumns().length;

		Prospect prospect = loadCurrentOther(daoSession.getProspectDao(),
				cursor, offset);
		if (prospect != null) {
			entity.setProspect(prospect);
		}
		offset += daoSession.getProspectDao().getAllColumns().length;

		Account account = loadCurrentOther(daoSession.getAccountDao(), cursor,
				offset);
		if (account != null) {
			entity.setAccount(account);
		}

		return entity;
	}

	public SaleExecution loadDeep(Long key) {
		assertSinglePk();
		if (key == null) {
			return null;
		}

		StringBuilder builder = new StringBuilder(getSelectDeep());
		builder.append("WHERE ");
		SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
		String sql = builder.toString();

		String[] keyArray = new String[] { key.toString() };
		Cursor cursor = db.rawQuery(sql, keyArray);

		try {
			boolean available = cursor.moveToFirst();
			if (!available) {
				return null;
			} else if (!cursor.isLast()) {
				throw new IllegalStateException(
						"Expected unique result, but count was "
								+ cursor.getCount());
			}
			return loadCurrentDeep(cursor, true);
		} finally {
			cursor.close();
		}
	}

	/**
	 * Reads all available rows from the given cursor and returns a list of new
	 * ImageTO objects.
	 */
	public List<SaleExecution> loadAllDeepFromCursor(Cursor cursor) {
		int count = cursor.getCount();
		List<SaleExecution> list = new ArrayList<SaleExecution>(count);

		if (cursor.moveToFirst()) {
			if (identityScope != null) {
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try {
				do {
					list.add(loadCurrentDeep(cursor, false));
				} while (cursor.moveToNext());
			} finally {
				if (identityScope != null) {
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<SaleExecution> loadDeepAllAndCloseCursor(Cursor cursor) {
		try {
			return loadAllDeepFromCursor(cursor);
		} finally {
			cursor.close();
		}
	}

	/** A raw-style query where you can pass any WHERE clause and arguments. */
	public List<SaleExecution> queryDeep(String where, String... selectionArg) {
		Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
		return loadDeepAllAndCloseCursor(cursor);
	}

}
