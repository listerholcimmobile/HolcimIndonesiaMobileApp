package com.holcim.altimetrik.android.model;

import java.util.List;
import com.holcim.altimetrik.android.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

//KEEP INCLUDES - put your custom includes here
import org.json.JSONObject;
import com.holcim.altimetrik.android.utilities.HolcimConsts;
import org.json.JSONException;
import com.holcim.altimetrik.android.exception.HolcimException;
//KEEP INCLUDES END

/**
 * Entity mapped to table PROSPECT.
 */
public class Prospect {

    private Long id;
    private String salesforceId;
    /** Not-null value. */
    private String name;
    private String mobileAddress;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProspectDao myDao;

    private List<OutstandingFeedback> outstandingFeedbacks;
    private List<TeleSale> teleSales;
    private List<SaleExecution> saleExecutions;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Prospect() {
    }

    public Prospect(Long id) {
        this.id = id;
    }

    public Prospect(Long id, String salesforceId, String name, String mobileAddress) {
        this.id = id;
        this.salesforceId = salesforceId;
        this.name = name;
        this.mobileAddress = mobileAddress;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProspectDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSalesforceId() {
        return salesforceId;
    }

    public void setSalesforceId(String salesforceId) {
        this.salesforceId = salesforceId;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public String getMobileAddress() {
        return mobileAddress;
    }

    public void setMobileAddress(String mobileAddress) {
        this.mobileAddress = mobileAddress;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<OutstandingFeedback> getOutstandingFeedbacks() {
        if (outstandingFeedbacks == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OutstandingFeedbackDao targetDao = daoSession.getOutstandingFeedbackDao();
            List<OutstandingFeedback> outstandingFeedbacksNew = targetDao._queryProspect_OutstandingFeedbacks(id);
            synchronized (this) {
                if(outstandingFeedbacks == null) {
                    outstandingFeedbacks = outstandingFeedbacksNew;
                }
            }
        }
        return outstandingFeedbacks;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetOutstandingFeedbacks() {
        outstandingFeedbacks = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TeleSale> getTeleSales() {
        if (teleSales == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeleSaleDao targetDao = daoSession.getTeleSaleDao();
            List<TeleSale> teleSalesNew = targetDao._queryProspect_TeleSales(id);
            synchronized (this) {
                if(teleSales == null) {
                    teleSales = teleSalesNew;
                }
            }
        }
        return teleSales;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTeleSales() {
        teleSales = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SaleExecution> getSaleExecutions() {
        if (saleExecutions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleExecutionDao targetDao = daoSession.getSaleExecutionDao();
            List<SaleExecution> saleExecutionsNew = targetDao._queryProspect_SaleExecutions(id);
            synchronized (this) {
                if(saleExecutions == null) {
                    saleExecutions = saleExecutionsNew;
                }
            }
        }
        return saleExecutions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSaleExecutions() {
        saleExecutions = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    
    public String toJSONString() throws Exception {
    	try {
			return this.toJSON().toString();
		} catch (Exception e) {
			throw e;
		}
    }
    
    public JSONObject toJSON() throws HolcimException {
    	try {
    		JSONObject jsonObj = new JSONObject();
    		jsonObj.put("name", this.getName());
    		jsonObj.put("salesforceId", this.getSalesforceId());    		
    		return jsonObj;
    	} catch (JSONException e) {
			throw new HolcimException(HolcimException.PARSE_EXCEPTION, HolcimConsts.ERROR_PARSING_JSON_STATUS, e.getMessage());
		}
    }
    // KEEP METHODS END

}
