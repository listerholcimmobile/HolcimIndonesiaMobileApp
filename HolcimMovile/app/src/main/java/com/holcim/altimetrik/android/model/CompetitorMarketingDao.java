package com.holcim.altimetrik.android.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.holcim.altimetrik.android.model.CompetitorMarketing;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COMPETITOR_MARKETING.
*/
public class CompetitorMarketingDao extends AbstractDao<CompetitorMarketing, Long> {

    public static final String TABLENAME = "COMPETITOR_MARKETING";

    /**
     * Properties of entity CompetitorMarketing.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SalesforceId = new Property(1, String.class, "salesforceId", false, "SALESFORCE_ID");
        public final static Property Program = new Property(2, String.class, "program", false, "PROGRAM");
        public final static Property ProgramStartDate = new Property(3, String.class, "programStartDate", false, "PROGRAM_START_DATE");
        public final static Property ProgramEndDate = new Property(4, String.class, "programEndDate", false, "PROGRAM_END_DATE");
        public final static Property Promotion = new Property(5, String.class, "promotion", false, "PROMOTION");
        public final static Property PromotionStartDate = new Property(6, String.class, "promotionStartDate", false, "PROMOTION_START_DATE");
        public final static Property PromotionEndDate = new Property(7, String.class, "promotionEndDate", false, "PROMOTION_END_DATE");
        public final static Property ExperienceLeadCompetitors = new Property(8, String.class, "experienceLeadCompetitors", false, "EXPERIENCE_LEAD_COMPETITORS");
        public final static Property ReasonBuyingLeadCompetitors = new Property(9, String.class, "reasonBuyingLeadCompetitors", false, "REASON_BUYING_LEAD_COMPETITORS");
        public final static Property CompetitorMarginHIL = new Property(10, Double.class, "competitorMarginHIL", false, "COMPETITOR_MARGIN_HIL");
        public final static Property BuyingPrice = new Property(11, Double.class, "buyingPrice", false, "BUYING_PRICE");
        public final static Property SellingPrice = new Property(12, Double.class, "sellingPrice", false, "SELLING_PRICE");
        public final static Property CompetitorName = new Property(13, String.class, "competitorName", false, "COMPETITOR_NAME");
        public final static Property Inventory = new Property(14, Integer.class, "inventory", false, "INVENTORY");
        public final static Property Issue = new Property(15, String.class, "issue", false, "ISSUE");
        public final static Property IsEdited = new Property(16, Boolean.class, "isEdited", false, "IS_EDITED");
        public final static Property LastMonthCompetitorBuyingVolume = new Property(17, Integer.class, "lastMonthCompetitorBuyingVolume", false, "LAST_MONTH_COMPETITOR_BUYING_VOLUME");
        public final static Property OtherReason = new Property(18, String.class, "otherReason", false, "OTHER_REASON");
        public final static Property ReasonForUnsatisfiedExperience = new Property(19, String.class, "reasonForUnsatisfiedExperience", false, "REASON_FOR_UNSATISFIED_EXPERIENCE");
        public final static Property SaleExecutionId = new Property(20, long.class, "saleExecutionId", false, "SALE_EXECUTION_ID");
        public final static Property CompetitorId = new Property(21, long.class, "competitorId", false, "COMPETITOR_ID");
    };

    private DaoSession daoSession;

    private Query<CompetitorMarketing> saleExecution_CompetitorMarketingsQuery;
    private Query<CompetitorMarketing> competitor_CompetitorMarketingsQuery;

    public CompetitorMarketingDao(DaoConfig config) {
        super(config);
    }
    
    public CompetitorMarketingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COMPETITOR_MARKETING' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SALESFORCE_ID' TEXT," + // 1: salesforceId
                "'PROGRAM' TEXT," + // 2: program
                "'PROGRAM_START_DATE' TEXT," + // 3: programStartDate
                "'PROGRAM_END_DATE' TEXT," + // 4: programEndDate
                "'PROMOTION' TEXT," + // 5: promotion
                "'PROMOTION_START_DATE' TEXT," + // 6: promotionStartDate
                "'PROMOTION_END_DATE' TEXT," + // 7: promotionEndDate
                "'EXPERIENCE_LEAD_COMPETITORS' TEXT," + // 8: experienceLeadCompetitors
                "'REASON_BUYING_LEAD_COMPETITORS' TEXT," + // 9: reasonBuyingLeadCompetitors
                "'COMPETITOR_MARGIN_HIL' REAL," + // 10: competitorMarginHIL
                "'BUYING_PRICE' REAL," + // 11: buyingPrice
                "'SELLING_PRICE' REAL," + // 12: sellingPrice
                "'COMPETITOR_NAME' TEXT," + // 13: competitorName
                "'INVENTORY' INTEGER," + // 14: inventory
                "'ISSUE' TEXT," + // 15: issue
                "'IS_EDITED' INTEGER," + // 16: isEdited
                "'LAST_MONTH_COMPETITOR_BUYING_VOLUME' INTEGER," + // 17: lastMonthCompetitorBuyingVolume
                "'OTHER_REASON' TEXT," + // 18: otherReason
                "'REASON_FOR_UNSATISFIED_EXPERIENCE' TEXT," + // 19: reasonForUnsatisfiedExperience
                "'SALE_EXECUTION_ID' INTEGER NOT NULL ," + // 20: saleExecutionId
                "'COMPETITOR_ID' INTEGER NOT NULL );"); // 21: competitorId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COMPETITOR_MARKETING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CompetitorMarketing entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String salesforceId = entity.getSalesforceId();
        if (salesforceId != null) {
            stmt.bindString(2, salesforceId);
        }
 
        String program = entity.getProgram();
        if (program != null) {
            stmt.bindString(3, program);
        }
 
        String programStartDate = entity.getProgramStartDate();
        if (programStartDate != null) {
            stmt.bindString(4, programStartDate);
        }
 
        String programEndDate = entity.getProgramEndDate();
        if (programEndDate != null) {
            stmt.bindString(5, programEndDate);
        }
 
        String promotion = entity.getPromotion();
        if (promotion != null) {
            stmt.bindString(6, promotion);
        }
 
        String promotionStartDate = entity.getPromotionStartDate();
        if (promotionStartDate != null) {
            stmt.bindString(7, promotionStartDate);
        }
 
        String promotionEndDate = entity.getPromotionEndDate();
        if (promotionEndDate != null) {
            stmt.bindString(8, promotionEndDate);
        }
 
        String experienceLeadCompetitors = entity.getExperienceLeadCompetitors();
        if (experienceLeadCompetitors != null) {
            stmt.bindString(9, experienceLeadCompetitors);
        }
 
        String reasonBuyingLeadCompetitors = entity.getReasonBuyingLeadCompetitors();
        if (reasonBuyingLeadCompetitors != null) {
            stmt.bindString(10, reasonBuyingLeadCompetitors);
        }
 
        Double competitorMarginHIL = entity.getCompetitorMarginHIL();
        if (competitorMarginHIL != null) {
            stmt.bindDouble(11, competitorMarginHIL);
        }
 
        Double buyingPrice = entity.getBuyingPrice();
        if (buyingPrice != null) {
            stmt.bindDouble(12, buyingPrice);
        }
 
        Double sellingPrice = entity.getSellingPrice();
        if (sellingPrice != null) {
            stmt.bindDouble(13, sellingPrice);
        }
 
        String competitorName = entity.getCompetitorName();
        if (competitorName != null) {
            stmt.bindString(14, competitorName);
        }
 
        Integer inventory = entity.getInventory();
        if (inventory != null) {
            stmt.bindLong(15, inventory);
        }
 
        String issue = entity.getIssue();
        if (issue != null) {
            stmt.bindString(16, issue);
        }
 
        Boolean isEdited = entity.getIsEdited();
        if (isEdited != null) {
            stmt.bindLong(17, isEdited ? 1l: 0l);
        }
 
        Integer lastMonthCompetitorBuyingVolume = entity.getLastMonthCompetitorBuyingVolume();
        if (lastMonthCompetitorBuyingVolume != null) {
            stmt.bindLong(18, lastMonthCompetitorBuyingVolume);
        }
 
        String otherReason = entity.getOtherReason();
        if (otherReason != null) {
            stmt.bindString(19, otherReason);
        }
 
        String reasonForUnsatisfiedExperience = entity.getReasonForUnsatisfiedExperience();
        if (reasonForUnsatisfiedExperience != null) {
            stmt.bindString(20, reasonForUnsatisfiedExperience);
        }
        stmt.bindLong(21, entity.getSaleExecutionId());
        stmt.bindLong(22, entity.getCompetitorId());
    }

    @Override
    protected void attachEntity(CompetitorMarketing entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CompetitorMarketing readEntity(Cursor cursor, int offset) {
        CompetitorMarketing entity = new CompetitorMarketing( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // salesforceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // program
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // programStartDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // programEndDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // promotion
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // promotionStartDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // promotionEndDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // experienceLeadCompetitors
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // reasonBuyingLeadCompetitors
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // competitorMarginHIL
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // buyingPrice
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // sellingPrice
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // competitorName
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // inventory
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // issue
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // isEdited
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // lastMonthCompetitorBuyingVolume
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // otherReason
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // reasonForUnsatisfiedExperience
            cursor.getLong(offset + 20), // saleExecutionId
            cursor.getLong(offset + 21) // competitorId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CompetitorMarketing entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSalesforceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProgram(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProgramStartDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProgramEndDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPromotion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPromotionStartDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPromotionEndDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExperienceLeadCompetitors(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReasonBuyingLeadCompetitors(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompetitorMarginHIL(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setBuyingPrice(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setSellingPrice(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setCompetitorName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setInventory(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setIssue(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIsEdited(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setLastMonthCompetitorBuyingVolume(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setOtherReason(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setReasonForUnsatisfiedExperience(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSaleExecutionId(cursor.getLong(offset + 20));
        entity.setCompetitorId(cursor.getLong(offset + 21));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CompetitorMarketing entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CompetitorMarketing entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "competitorMarketings" to-many relationship of SaleExecution. */
    public List<CompetitorMarketing> _querySaleExecution_CompetitorMarketings(long saleExecutionId) {
        synchronized (this) {
            if (saleExecution_CompetitorMarketingsQuery == null) {
                QueryBuilder<CompetitorMarketing> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SaleExecutionId.eq(null));
                saleExecution_CompetitorMarketingsQuery = queryBuilder.build();
            }
        }
        Query<CompetitorMarketing> query = saleExecution_CompetitorMarketingsQuery.forCurrentThread();
        query.setParameter(0, saleExecutionId);
        return query.list();
    }

    /** Internal query to resolve the "competitorMarketings" to-many relationship of Competitor. */
    public List<CompetitorMarketing> _queryCompetitor_CompetitorMarketings(long competitorId) {
        synchronized (this) {
            if (competitor_CompetitorMarketingsQuery == null) {
                QueryBuilder<CompetitorMarketing> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CompetitorId.eq(null));
                competitor_CompetitorMarketingsQuery = queryBuilder.build();
            }
        }
        Query<CompetitorMarketing> query = competitor_CompetitorMarketingsQuery.forCurrentThread();
        query.setParameter(0, competitorId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSaleExecutionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCompetitorDao().getAllColumns());
            builder.append(" FROM COMPETITOR_MARKETING T");
            builder.append(" LEFT JOIN SALE_EXECUTION T0 ON T.'SALE_EXECUTION_ID'=T0.'_id'");
            builder.append(" LEFT JOIN COMPETITOR T1 ON T.'COMPETITOR_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CompetitorMarketing loadCurrentDeep(Cursor cursor, boolean lock) {
        CompetitorMarketing entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        SaleExecution saleExecution = loadCurrentOther(daoSession.getSaleExecutionDao(), cursor, offset);
         if(saleExecution != null) {
            entity.setSaleExecution(saleExecution);
        }
        offset += daoSession.getSaleExecutionDao().getAllColumns().length;

        Competitor competitor = loadCurrentOther(daoSession.getCompetitorDao(), cursor, offset);
         if(competitor != null) {
            entity.setCompetitor(competitor);
        }

        return entity;    
    }

    public CompetitorMarketing loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CompetitorMarketing> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CompetitorMarketing> list = new ArrayList<CompetitorMarketing>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CompetitorMarketing> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CompetitorMarketing> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
