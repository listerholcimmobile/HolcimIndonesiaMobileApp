package com.holcim.altimetrik.android.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.holcim.altimetrik.android.model.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTACT.
*/
public class ContactDao extends AbstractDao<Contact, Long> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SalesforceId = new Property(1, String.class, "salesforceId", false, "SALESFORCE_ID");
        public final static Property FirstName = new Property(2, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(3, String.class, "lastName", false, "LAST_NAME");
        public final static Property Gender = new Property(4, String.class, "gender", false, "GENDER");
        public final static Property BirthDate = new Property(5, String.class, "birthDate", false, "BIRTH_DATE");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property Mobile = new Property(7, String.class, "mobile", false, "MOBILE");
        public final static Property Extension = new Property(8, String.class, "extension", false, "EXTENSION");
        public final static Property Fax = new Property(9, String.class, "fax", false, "FAX");
        public final static Property Email = new Property(10, String.class, "email", false, "EMAIL");
        public final static Property MailingStreet = new Property(11, String.class, "mailingStreet", false, "MAILING_STREET");
        public final static Property MailingCity = new Property(12, String.class, "mailingCity", false, "MAILING_CITY");
        public final static Property MailingStateProvince = new Property(13, String.class, "mailingStateProvince", false, "MAILING_STATE_PROVINCE");
        public final static Property MailingPostalCode = new Property(14, String.class, "mailingPostalCode", false, "MAILING_POSTAL_CODE");
        public final static Property MailingCountry = new Property(15, String.class, "mailingCountry", false, "MAILING_COUNTRY");
        public final static Property Nationality = new Property(16, String.class, "nationality", false, "NATIONALITY");
        public final static Property AccountId = new Property(17, String.class, "accountId", false, "ACCOUNT_ID");
        public final static Property AccountName = new Property(18, String.class, "accountName", false, "ACCOUNT_NAME");
        public final static Property Picturemd5 = new Property(19, String.class, "picturemd5", false, "PICTUREMD5");
        public final static Property RetailerID = new Property(20, String.class, "retailerID", false, "RETAILER_ID");
    };


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTACT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SALESFORCE_ID' TEXT," + // 1: salesforceId
                "'FIRST_NAME' TEXT," + // 2: firstName
                "'LAST_NAME' TEXT," + // 3: lastName
                "'GENDER' TEXT," + // 4: gender
                "'BIRTH_DATE' TEXT," + // 5: birthDate
                "'PHONE' TEXT," + // 6: phone
                "'MOBILE' TEXT," + // 7: mobile
                "'EXTENSION' TEXT," + // 8: extension
                "'FAX' TEXT," + // 9: fax
                "'EMAIL' TEXT," + // 10: email
                "'MAILING_STREET' TEXT," + // 11: mailingStreet
                "'MAILING_CITY' TEXT," + // 12: mailingCity
                "'MAILING_STATE_PROVINCE' TEXT," + // 13: mailingStateProvince
                "'MAILING_POSTAL_CODE' TEXT," + // 14: mailingPostalCode
                "'MAILING_COUNTRY' TEXT," + // 15: mailingCountry
                "'NATIONALITY' TEXT," + // 16: nationality
                "'ACCOUNT_ID' TEXT," + // 17: accountId
                "'ACCOUNT_NAME' TEXT," + // 18: accountName
                "'PICTUREMD5' TEXT," + // 19: picturemd5
                "'RETAILER_ID' TEXT);"); // 20: retailerID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTACT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String salesforceId = entity.getSalesforceId();
        if (salesforceId != null) {
            stmt.bindString(2, salesforceId);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(3, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(4, lastName);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String birthDate = entity.getBirthDate();
        if (birthDate != null) {
            stmt.bindString(6, birthDate);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(8, mobile);
        }
 
        String extension = entity.getExtension();
        if (extension != null) {
            stmt.bindString(9, extension);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(10, fax);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String mailingStreet = entity.getMailingStreet();
        if (mailingStreet != null) {
            stmt.bindString(12, mailingStreet);
        }
 
        String mailingCity = entity.getMailingCity();
        if (mailingCity != null) {
            stmt.bindString(13, mailingCity);
        }
 
        String mailingStateProvince = entity.getMailingStateProvince();
        if (mailingStateProvince != null) {
            stmt.bindString(14, mailingStateProvince);
        }
 
        String mailingPostalCode = entity.getMailingPostalCode();
        if (mailingPostalCode != null) {
            stmt.bindString(15, mailingPostalCode);
        }
 
        String mailingCountry = entity.getMailingCountry();
        if (mailingCountry != null) {
            stmt.bindString(16, mailingCountry);
        }
 
        String nationality = entity.getNationality();
        if (nationality != null) {
            stmt.bindString(17, nationality);
        }
 
        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(18, accountId);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(19, accountName);
        }
 
        String picturemd5 = entity.getPicturemd5();
        if (picturemd5 != null) {
            stmt.bindString(20, picturemd5);
        }
 
        String retailerID = entity.getRetailerID();
        if (retailerID != null) {
            stmt.bindString(21, retailerID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // salesforceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // firstName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // birthDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mobile
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // extension
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fax
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // email
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // mailingStreet
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // mailingCity
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // mailingStateProvince
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // mailingPostalCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // mailingCountry
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // nationality
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // accountId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // accountName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // picturemd5
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // retailerID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSalesforceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFirstName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirthDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMobile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExtension(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFax(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMailingStreet(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMailingCity(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMailingStateProvince(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMailingPostalCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMailingCountry(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNationality(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAccountId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAccountName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPicturemd5(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRetailerID(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Contact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Contact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
