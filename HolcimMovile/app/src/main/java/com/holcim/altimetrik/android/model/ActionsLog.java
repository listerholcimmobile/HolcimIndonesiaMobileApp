package com.holcim.altimetrik.android.model;
import android.content.Context;

import com.altimetrik.holcim.data.managment.HolcimDataSource;

import com.holcim.altimetrik.android.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import org.json.JSONObject;

import com.holcim.altimetrik.android.utilities.AltimetrikException;
import com.holcim.altimetrik.android.utilities.AltimetrikFileHandler;
import com.holcim.altimetrik.android.utilities.HolcimConsts;
import org.json.JSONException;

import com.holcim.altimetrik.android.exception.HolcimError;
import com.holcim.altimetrik.android.exception.HolcimException;

import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;
// KEEP INCLUDES END
/**
 * Entity mapped to table ACTIONS_LOG.
 */
public class ActionsLog implements Serializable, Comparable<ActionsLog> {

    private Long id;
    private String salesforceId;
    private String actionLogNumber;
    private String description;
    private String status;
    private Boolean complaint;
    private String category;
    private String picture;
    private String pictureDescription;
    private Boolean isEdited;
    private long saleExecutionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ActionsLogDao myDao;

    private SaleExecution saleExecution;
    private Long saleExecution__resolvedKey;


    // KEEP FIELDS - put your custom fields here
	/**
	 * 
	 */
	private static final long serialVersionUID = -1164741133216317965L;
    // KEEP FIELDS END

    public ActionsLog() {
    }

    public ActionsLog(Long id) {
        this.id = id;
    }

    public ActionsLog(Long id, String salesforceId, String actionLogNumber, String description, String status, Boolean complaint, String category, String picture, String pictureDescription, Boolean isEdited, long saleExecutionId) {
        this.id = id;
        this.salesforceId = salesforceId;
        this.actionLogNumber = actionLogNumber;
        this.description = description;
        this.status = status;
        this.complaint = complaint;
        this.category = category;
        this.picture = picture;
        this.pictureDescription = pictureDescription;
        this.isEdited = isEdited;
        this.saleExecutionId = saleExecutionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getActionsLogDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSalesforceId() {
        return salesforceId;
    }

    public void setSalesforceId(String salesforceId) {
        this.salesforceId = salesforceId;
    }

    public String getActionLogNumber() {
        return actionLogNumber;
    }

    public void setActionLogNumber(String actionLogNumber) {
        this.actionLogNumber = actionLogNumber;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Boolean getComplaint() {
        return complaint;
    }

    public void setComplaint(Boolean complaint) {
        this.complaint = complaint;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getPicture() {
        return picture;
    }

    public void setPicture(String picture) {
        this.picture = picture;
    }

    public String getPictureDescription() {
        return pictureDescription;
    }

    public void setPictureDescription(String pictureDescription) {
        this.pictureDescription = pictureDescription;
    }

    public Boolean getIsEdited() {
        return isEdited;
    }

    public void setIsEdited(Boolean isEdited) {
        this.isEdited = isEdited;
    }

    public long getSaleExecutionId() {
        return saleExecutionId;
    }

    public void setSaleExecutionId(long saleExecutionId) {
        this.saleExecutionId = saleExecutionId;
    }

    /** To-one relationship, resolved on first access. */
    public SaleExecution getSaleExecution() {
        long __key = this.saleExecutionId;
        if (saleExecution__resolvedKey == null || !saleExecution__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleExecutionDao targetDao = daoSession.getSaleExecutionDao();
            SaleExecution saleExecutionNew = targetDao.load(__key);
            synchronized (this) {
                saleExecution = saleExecutionNew;
            	saleExecution__resolvedKey = __key;
            }
        }
        return saleExecution;
    }

    public void setSaleExecution(SaleExecution saleExecution) {
        if (saleExecution == null) {
            throw new DaoException("To-one property 'saleExecutionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saleExecution = saleExecution;
            saleExecutionId = saleExecution.getId();
            saleExecution__resolvedKey = saleExecutionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

	public String toJSONString() throws Exception {
		try {
			return this.toJSON().toString();
		} catch (Exception e) {
			throw e;
		}
	}

	public JSONObject toJSON() throws HolcimException {
		try {
			JSONObject jsonObj = new JSONObject();
			jsonObj.putOpt("salesforceId", this.salesforceId);
			jsonObj.putOpt("description", this.description);
			jsonObj.putOpt("status", this.status);
			jsonObj.putOpt("category", this.category);
			jsonObj.putOpt("complaint", this.complaint);
			jsonObj.putOpt("pictureDescription", this.pictureDescription);
			jsonObj.putOpt("pictureMD5", this.picture);
			//			jsonObj.putOpt("dateDeadline", this.dateDeadline);
			//			jsonObj.putOpt("dateEscalated", this.dateEscalated);
			//			jsonObj.putOpt("reasonBuyingLeadCompetitors", this.reasonBuyingLeadCompetitors);
			//			jsonObj.putOpt("competitorMarginHIL", this.competitorMarginHIL);
			//			jsonObj.putOpt("actionToBeTaken", this.actionToBeTaken);
			//			jsonObj.putOpt("commentCategory", this.commentCategory);
			//			jsonObj.putOpt("commentDate", this.commentDate);
			//			jsonObj.putOpt("commentType", this.commentType);
			//			jsonObj.putOpt("number1", this.number1);
			//			jsonObj.putOpt("PCIName", this.PCIName);
			//			jsonObj.putOpt("PCIPosition", this.PCIPosition);
			//			jsonObj.putOpt("reasonForPendingAction", this.reasonForPendingAction);
			//			jsonObj.putOpt("retailer", this.retailer);
			//			
			//			jsonObj.putOpt("retailerName", this.retailerName);
			//			jsonObj.putOpt("retailerSegmentation", this.retailerSegmentation);
			//			jsonObj.putOpt("retailerType", this.retailerType);
			//			jsonObj.putOpt("rootCauseAnalisys", this.rootCauseAnalisys);
			//			jsonObj.putOpt("streetAddress", this.streetAddress);
			//			jsonObj.putOpt("targetedOutcome", this.targetedOutcome);
			if (this.getSaleExecution() != null) {
				jsonObj.putOpt("saleExecution", this.getSaleExecution().getSalesforceId());
			}

			return jsonObj;
		} catch (JSONException e) {
			throw new HolcimException(HolcimException.PARSE_EXCEPTION, HolcimConsts.ERROR_PARSING_JSON_STATUS, e.getMessage());
		}
	}

	public boolean equals(ActionsLog object) {
		return this.compareTo(object) == 0;
	}

	public ActionsLog isContained(ArrayList<ActionsLog> actionsLogList) {
		for (ActionsLog actionsLog : actionsLogList) {
			if (this.equals(actionsLog)) {
				return actionsLog;
			}
		}
		return null;
	}

	public boolean checkPicturMD5(Context context) throws HolcimException {		
		try {
			AltimetrikFileHandler fileHandler = new AltimetrikFileHandler(context);
			return fileHandler.GetChecksum(getPicturePath(context)).equals(this.getPicture());
		} catch (AltimetrikException e) {
			throw new HolcimException(HolcimException.FILE_EXCEPTION, new HolcimError(HolcimConsts.FILE_ERROR_STATUS, e.getMessage()));
		} catch (HolcimException e) {
			throw e;
		}
	}

	public String getTempActionLogPictureFilePath(Context context, Long actionLogId) throws HolcimException {
		try {
			return HolcimDataSource.getTempMediaDirActionLog(context, actionLogId) + File.separator + 
					HolcimConsts.ACTIONLOG_TEMPORAL_FILE_NAME_PART1 + actionLogId  + HolcimConsts.ACTIONLOG_TEMPORAL_FILE_NAME_PART2;
		} catch (HolcimException e) {
			throw e;
		}
	}

	public boolean isActionLogPictureTempFileExist(Context context, Long actionLogId) throws HolcimException {
		try {
			return AltimetrikFileHandler.isFileExist(getTempActionLogPictureFilePath(context, actionLogId));
		} catch (HolcimException e) {
			throw e;
		}
	}

	public String getPicturePath(Context context) throws HolcimException {
		try {
			return HolcimDataSource.GetActionLogImagePath(context, this, HolcimConsts.ACTIONLOG_SF_IMAGE_FIELD_NAME);
		} catch (HolcimException e) {
			throw e;
		}
	}

	public boolean isPictureFileExist(Context context) throws HolcimException {
		try {
			return AltimetrikFileHandler.isFileExist(getPicturePath(context));
		} catch (HolcimException e) {
			throw e;
		}
	}

	public int isContainedPosition(ArrayList<ActionsLog> actionsLogList) {
		for (int i = 0; i < actionsLogList.size(); i++) {
			if (this.equals(actionsLogList.get(i))) {
				return i;
			}
		}
		return -1;
	}

	public String getTempActionLogPictureFileName(Context context, Long actionLogId) {
		return HolcimConsts.ACTIONLOG_TEMPORAL_FILE_NAME_PART1  + actionLogId + HolcimConsts.ACTIONLOG_TEMPORAL_FILE_NAME_PART2;
	}

	public String getPictureFileName() {
		return this.getId().toString() + "_" + HolcimConsts.ACTIONLOG_PICTURE_FILENAME + ".jpg";
	}

	public String getActionLogPicturePath(Context context) throws HolcimException {
		try {
			return HolcimDataSource.GetActionLogImagePath(context, this, HolcimConsts.ACTIONLOG_SF_IMAGE_FIELD_NAME);
		} catch (HolcimException e) {
			throw e;
		}
	}

	public boolean needDownloadPicture(Context context) throws HolcimException {
		try {
			if (this.getPicture() != null && !this.getPicture().equals("")) {
				if (!isPictureFileExist(context) || !checkPicturMD5(context)) {
					return true;
				}
			}
			return false;
		} catch (Exception e) {
			throw new HolcimException(HolcimException.FILE_EXCEPTION, new HolcimError(HolcimConsts.FILE_ERROR_STATUS, e.getMessage()));
		}
	}

	public boolean needUploadPicture(Context context) throws HolcimException {
		try {
			if ((this.getSalesforceId() == null || this.getSalesforceId().equals("")) && isPictureFileExist(context)) {
				return true;
			} else if (this.getIsEdited() && isPictureFileExist(context) && !checkPicturMD5(context)) {
				return true;
			}
			return false;
		} catch (HolcimException e) {
			throw e;
		}
	}

	public String getImagePath(Context context, String field) throws HolcimException {
		try {
			String ret = null;
			if (field.equals(HolcimConsts.ACTIONLOG_SF_IMAGE_FIELD_NAME)) {
				ret = getActionLogPicturePath(context);
			}
			return ret;
		} catch (HolcimException e) {
			throw e;
		}
	}

	@Override
	public int compareTo(ActionsLog another) {
		if (this.getComplaint() == another.getComplaint() && 
				this.getCategory().equals(another.getCategory()) && 
				this.getDescription().equals(another.getDescription()) && 
				this.getStatus().equals(another.getStatus()) && 
				this.getId() == another.getId()) {
			return 0;
		}
		return -1;
	}
    // KEEP METHODS END

}
