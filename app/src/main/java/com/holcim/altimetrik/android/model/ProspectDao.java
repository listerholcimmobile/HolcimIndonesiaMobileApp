package com.holcim.altimetrik.android.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.holcim.altimetrik.android.model.Prospect;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROSPECT.
*/
public class ProspectDao extends AbstractDao<Prospect, Long> {

    public static final String TABLENAME = "PROSPECT";

    /**
     * Properties of entity Prospect.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SalesforceId = new Property(1, String.class, "salesforceId", false, "SALESFORCE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property MobileAddress = new Property(3, String.class, "mobileAddress", false, "MOBILE_ADDRESS");
        public final static Property Kecamatan = new Property(4, String.class, "kecamatan", false, "KECAMATAN");
        public final static Property Refnumber = new Property(5, String.class, "refnumber", false, "REFNUMBER");
    };

    private DaoSession daoSession;


    public ProspectDao(DaoConfig config) {
        super(config);
    }
    
    public ProspectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROSPECT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SALESFORCE_ID' TEXT," + // 1: salesforceId
                "'NAME' TEXT NOT NULL ," + // 2: name
                "'MOBILE_ADDRESS' TEXT," + // 3: mobileAddress
                "'KECAMATAN' TEXT," + // 4: kecamatan
                "'REFNUMBER' TEXT );"); // 6: refnumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROSPECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Prospect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String salesforceId = entity.getSalesforceId();
        if (salesforceId != null) {
            stmt.bindString(2, salesforceId);
        }
        stmt.bindString(3, entity.getName());
 
        String mobileAddress = entity.getMobileAddress();
        if (mobileAddress != null) {
            stmt.bindString(4, mobileAddress);
        }

        String kecamatan = entity.getKecamatan();
        if (kecamatan != null) {
            stmt.bindString(5, kecamatan);
        }

        String refnumber = entity.getRefnumber();
        if (refnumber != null) {
            stmt.bindString(6, refnumber);
        }
    }

    @Override
    protected void attachEntity(Prospect entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Prospect readEntity(Cursor cursor, int offset) {
        Prospect entity = new Prospect( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // salesforceId
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3),// mobileAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // kecamatan
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // refnumber
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Prospect entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSalesforceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setMobileAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Prospect entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Prospect entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
