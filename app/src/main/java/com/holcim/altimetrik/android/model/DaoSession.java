package com.holcim.altimetrik.android.model;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.holcim.altimetrik.android.model.User;
import com.holcim.altimetrik.android.model.SaleExecution;
import com.holcim.altimetrik.android.model.CompetitorMarketing;
import com.holcim.altimetrik.android.model.ActionsLog;
import com.holcim.altimetrik.android.model.OutstandingFeedback;
import com.holcim.altimetrik.android.model.Account;
import com.holcim.altimetrik.android.model.Competitor;
import com.holcim.altimetrik.android.model.PreOrder;
import com.holcim.altimetrik.android.model.TeleSale;
import com.holcim.altimetrik.android.model.Prospect;
import com.holcim.altimetrik.android.model.Contact;

import com.holcim.altimetrik.android.model.UserDao;
import com.holcim.altimetrik.android.model.SaleExecutionDao;
import com.holcim.altimetrik.android.model.CompetitorMarketingDao;
import com.holcim.altimetrik.android.model.ActionsLogDao;
import com.holcim.altimetrik.android.model.OutstandingFeedbackDao;
import com.holcim.altimetrik.android.model.AccountDao;
import com.holcim.altimetrik.android.model.CompetitorDao;
import com.holcim.altimetrik.android.model.PreOrderDao;
import com.holcim.altimetrik.android.model.TeleSaleDao;
import com.holcim.altimetrik.android.model.ProspectDao;
import com.holcim.altimetrik.android.model.ContactDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig userDaoConfig;
    private final DaoConfig saleExecutionDaoConfig;
    private final DaoConfig competitorMarketingDaoConfig;
    private final DaoConfig actionsLogDaoConfig;
    private final DaoConfig outstandingFeedbackDaoConfig;
    private final DaoConfig accountDaoConfig;
    private final DaoConfig competitorDaoConfig;
    private final DaoConfig preOrderDaoConfig;
    private final DaoConfig teleSaleDaoConfig;
    private final DaoConfig prospectDaoConfig;
    private final DaoConfig contactDaoConfig;

    private final UserDao userDao;
    private final SaleExecutionDao saleExecutionDao;
    private final CompetitorMarketingDao competitorMarketingDao;
    private final ActionsLogDao actionsLogDao;
    private final OutstandingFeedbackDao outstandingFeedbackDao;
    private final AccountDao accountDao;
    private final CompetitorDao competitorDao;
    private final PreOrderDao preOrderDao;
    private final TeleSaleDao teleSaleDao;
    private final ProspectDao prospectDao;
    private final ContactDao contactDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        saleExecutionDaoConfig = daoConfigMap.get(SaleExecutionDao.class).clone();
        saleExecutionDaoConfig.initIdentityScope(type);

        competitorMarketingDaoConfig = daoConfigMap.get(CompetitorMarketingDao.class).clone();
        competitorMarketingDaoConfig.initIdentityScope(type);

        actionsLogDaoConfig = daoConfigMap.get(ActionsLogDao.class).clone();
        actionsLogDaoConfig.initIdentityScope(type);

        outstandingFeedbackDaoConfig = daoConfigMap.get(OutstandingFeedbackDao.class).clone();
        outstandingFeedbackDaoConfig.initIdentityScope(type);

        accountDaoConfig = daoConfigMap.get(AccountDao.class).clone();
        accountDaoConfig.initIdentityScope(type);

        competitorDaoConfig = daoConfigMap.get(CompetitorDao.class).clone();
        competitorDaoConfig.initIdentityScope(type);

        preOrderDaoConfig = daoConfigMap.get(PreOrderDao.class).clone();
        preOrderDaoConfig.initIdentityScope(type);

        teleSaleDaoConfig = daoConfigMap.get(TeleSaleDao.class).clone();
        teleSaleDaoConfig.initIdentityScope(type);

        prospectDaoConfig = daoConfigMap.get(ProspectDao.class).clone();
        prospectDaoConfig.initIdentityScope(type);

        contactDaoConfig = daoConfigMap.get(ContactDao.class).clone();
        contactDaoConfig.initIdentityScope(type);

        userDao = new UserDao(userDaoConfig, this);
        saleExecutionDao = new SaleExecutionDao(saleExecutionDaoConfig, this);
        competitorMarketingDao = new CompetitorMarketingDao(competitorMarketingDaoConfig, this);
        actionsLogDao = new ActionsLogDao(actionsLogDaoConfig, this);
        outstandingFeedbackDao = new OutstandingFeedbackDao(outstandingFeedbackDaoConfig, this);
        accountDao = new AccountDao(accountDaoConfig, this);
        competitorDao = new CompetitorDao(competitorDaoConfig, this);
        preOrderDao = new PreOrderDao(preOrderDaoConfig, this);
        teleSaleDao = new TeleSaleDao(teleSaleDaoConfig, this);
        prospectDao = new ProspectDao(prospectDaoConfig, this);
        contactDao = new ContactDao(contactDaoConfig, this);

        registerDao(User.class, userDao);
        registerDao(SaleExecution.class, saleExecutionDao);
        registerDao(CompetitorMarketing.class, competitorMarketingDao);
        registerDao(ActionsLog.class, actionsLogDao);
        registerDao(OutstandingFeedback.class, outstandingFeedbackDao);
        registerDao(Account.class, accountDao);
        registerDao(Competitor.class, competitorDao);
        registerDao(PreOrder.class, preOrderDao);
        registerDao(TeleSale.class, teleSaleDao);
        registerDao(Prospect.class, prospectDao);
        registerDao(Contact.class, contactDao);
    }
    
    public void clear() {
        userDaoConfig.getIdentityScope().clear();
        saleExecutionDaoConfig.getIdentityScope().clear();
        competitorMarketingDaoConfig.getIdentityScope().clear();
        actionsLogDaoConfig.getIdentityScope().clear();
        outstandingFeedbackDaoConfig.getIdentityScope().clear();
        accountDaoConfig.getIdentityScope().clear();
        competitorDaoConfig.getIdentityScope().clear();
        preOrderDaoConfig.getIdentityScope().clear();
        teleSaleDaoConfig.getIdentityScope().clear();
        prospectDaoConfig.getIdentityScope().clear();
        contactDaoConfig.getIdentityScope().clear();
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public SaleExecutionDao getSaleExecutionDao() {
        return saleExecutionDao;
    }

    public CompetitorMarketingDao getCompetitorMarketingDao() {
        return competitorMarketingDao;
    }

    public ActionsLogDao getActionsLogDao() {
        return actionsLogDao;
    }

    public OutstandingFeedbackDao getOutstandingFeedbackDao() {
        return outstandingFeedbackDao;
    }

    public AccountDao getAccountDao() {
        return accountDao;
    }

    public CompetitorDao getCompetitorDao() {
        return competitorDao;
    }

    public PreOrderDao getPreOrderDao() {
        return preOrderDao;
    }

    public TeleSaleDao getTeleSaleDao() {
        return teleSaleDao;
    }

    public ProspectDao getProspectDao() {
        return prospectDao;
    }

    public ContactDao getContactDao() {
        return contactDao;
    }

}
