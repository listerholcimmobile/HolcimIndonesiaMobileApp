package com.holcim.altimetrik.android.model;

import com.holcim.altimetrik.android.exception.HolcimException;
import com.holcim.altimetrik.android.model.DaoSession;
import com.holcim.altimetrik.android.utilities.HolcimConsts;

import org.json.JSONException;
import org.json.JSONObject;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table OUTSTANDING_FEEDBACK.
 */
public class OutstandingFeedback {

    private Long id;
    private String salesforceId;
    private String description;
    private String status;
    private Boolean complaint;
    private String category;
    private String salesforceAccountId;
    private String salesforceProspectId;
    private long accountId;
    private long prospectId;
    private Boolean isEdited;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OutstandingFeedbackDao myDao;

    private Account account;
    private Long account__resolvedKey;

    private Prospect prospect;
    private Long prospect__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public OutstandingFeedback() {
    }

    public OutstandingFeedback(Long id) {
        this.id = id;
    }

    public OutstandingFeedback(Long id, String salesforceId, String description, String status, Boolean complaint, String category, String salesforceAccountId, String salesforceProspectId, long accountId, long prospectId,Boolean isEdited) {
        this.id = id;
        this.salesforceId = salesforceId;
        this.description = description;
        this.status = status;
        this.complaint = complaint;
        this.category = category;
        this.salesforceAccountId = salesforceAccountId;
        this.salesforceProspectId = salesforceProspectId;
        this.accountId = accountId;
        this.prospectId = prospectId;
        this.isEdited = isEdited;
    }

    public JSONObject toJSON() throws HolcimException {
        try {
            JSONObject jsonObj = new JSONObject();
            jsonObj.putOpt("salesforceId", this.salesforceId);
            jsonObj.putOpt("description", this.description);
            jsonObj.putOpt("status", this.status);
            jsonObj.putOpt("category", this.category);
            jsonObj.putOpt("complaint", this.complaint);
            return jsonObj;
        } catch (JSONException e) {
            throw new HolcimException(HolcimException.PARSE_EXCEPTION, HolcimConsts.ERROR_PARSING_JSON_STATUS, e.getMessage());
        }
    }



    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOutstandingFeedbackDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSalesforceId() {
        return salesforceId;
    }

    public void setSalesforceId(String salesforceId) {
        this.salesforceId = salesforceId;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Boolean getComplaint() {
        return complaint;
    }

    public void setComplaint(Boolean complaint) {
        this.complaint = complaint;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getSalesforceAccountId() {
        return salesforceAccountId;
    }

    public void setSalesforceAccountId(String salesforceAccountId) {
        this.salesforceAccountId = salesforceAccountId;
    }

    public String getSalesforceProspectId() {
        return salesforceProspectId;
    }

    public void setSalesforceProspectId(String salesforceProspectId) {
        this.salesforceProspectId = salesforceProspectId;
    }

    public long getAccountId() {
        return accountId;
    }

    public void setAccountId(long accountId) {
        this.accountId = accountId;
    }

    public long getProspectId() {
        return prospectId;
    }

    public void setProspectId(long prospectId) {
        this.prospectId = prospectId;
    }

    public Boolean getIsEdited() {
        return isEdited;
    }

    public void setIsEdited(Boolean isEdited) {
        this.isEdited = isEdited;
    }

    /** To-one relationship, resolved on first access. */
    public Account getAccount() {
        long __key = this.accountId;
        if (account__resolvedKey == null || !account__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AccountDao targetDao = daoSession.getAccountDao();
            Account accountNew = targetDao.load(__key);
            synchronized (this) {
                account = accountNew;
            	account__resolvedKey = __key;
            }
        }
        return account;
    }

    public void setAccount(Account account) {
        if (account == null) {
            throw new DaoException("To-one property 'accountId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.account = account;
            accountId = account.getId();
            account__resolvedKey = accountId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Prospect getProspect() {
        long __key = this.prospectId;
        if (prospect__resolvedKey == null || !prospect__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProspectDao targetDao = daoSession.getProspectDao();
            Prospect prospectNew = targetDao.load(__key);
            synchronized (this) {
                prospect = prospectNew;
            	prospect__resolvedKey = __key;
            }
        }
        return prospect;
    }

    public void setProspect(Prospect prospect) {
        if (prospect == null) {
            throw new DaoException("To-one property 'prospectId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.prospect = prospect;
            prospectId = prospect.getId();
            prospect__resolvedKey = prospectId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
