package com.holcim.altimetrik.android.model;
import android.content.Context;

import com.altimetrik.holcim.data.managment.HolcimDataSource;

import com.holcim.altimetrik.android.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import org.json.JSONObject;

import com.holcim.altimetrik.android.utilities.AltimetrikException;
import com.holcim.altimetrik.android.utilities.AltimetrikFileHandler;
import com.holcim.altimetrik.android.utilities.HolcimConsts;
import org.json.JSONException;

import com.holcim.altimetrik.android.exception.HolcimError;
import com.holcim.altimetrik.android.exception.HolcimException;

import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;
// KEEP INCLUDES END
/**
 * Entity mapped to table ACTIONS_LOG.
 */
public class ActionsLog implements Serializable, Comparable<ActionsLog> {

    private Long id;
    private String salesforceId;
    private String actionLogNumber;
    private String description;
    private String status;
    private Boolean complaint;
    private String category;
    private String picture;
    private String pictureDescription;
    private String picture1;
    private String pictureDescription1;
    private String picture2;
    private String pictureDescription2;
    private String picture3;
    private String pictureDescription3;
    private String picture4;
    private String pictureDescription4;
    private Boolean isEdited;
    private long saleExecutionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ActionsLogDao myDao;

    private SaleExecution saleExecution;
    private Long saleExecution__resolvedKey;


    // KEEP FIELDS - put your custom fields here
	/**
	 * 
	 */
	private static final long serialVersionUID = -1164741133216317965L;
    // KEEP FIELDS END

    public ActionsLog() {
    }

    public ActionsLog(Long id) {
        this.id = id;
    }

    public ActionsLog(Long id, String salesforceId, String actionLogNumber, String description, String status, Boolean complaint, String category, String picture, String pictureDescription, String picture1, String pictureDescription1, String picture2, String pictureDescription2, String picture3, String pictureDescription3, String picture4, String pictureDescription4, Boolean isEdited, long saleExecutionId) {
        this.id = id;
        this.salesforceId = salesforceId;
        this.actionLogNumber = actionLogNumber;
        this.description = description;
        this.status = status;
        this.complaint = complaint;
        this.category = category;
        this.picture = picture;
        this.pictureDescription = pictureDescription;
        this.picture1 = picture1;
        this.pictureDescription1 = pictureDescription1;
        this.picture1 = picture2;
        this.pictureDescription2 = pictureDescription2;
        this.picture1 = picture3;
        this.pictureDescription3 = pictureDescription3;
        this.picture1 = picture4;
        this.pictureDescription4 = pictureDescription4;
        this.isEdited = isEdited;
        this.saleExecutionId = saleExecutionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getActionsLogDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSalesforceId() {
        return salesforceId;
    }

    public void setSalesforceId(String salesforceId) {
        this.salesforceId = salesforceId;
    }

    public String getActionLogNumber() {
        return actionLogNumber;
    }

    public void setActionLogNumber(String actionLogNumber) {
        this.actionLogNumber = actionLogNumber;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Boolean getComplaint() {
        return complaint;
    }

    public void setComplaint(Boolean complaint) {
        this.complaint = complaint;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getPicture() { return picture; }

    public void setPicture(String picture) {
        this.picture = picture;
    }

    public String getPictureDescription() {
        return pictureDescription;
    }

    public void setPictureDescription(String pictureDescription) {
        this.pictureDescription = pictureDescription;
    }

    public String getPicture1() { return picture1; }

    public void setPicture1(String picture1) {
        this.picture1 = picture1;
    }

    public String getPictureDescription1() {
        return pictureDescription1;
    }

    public void setPictureDescription1(String pictureDescription1) {
        this.pictureDescription1 = pictureDescription1;
    }

    public String getPicture2() { return picture2; }

    public void setPicture2(String picture2) {
        this.picture2 = picture2;
    }

    public String getPictureDescription2() {
        return pictureDescription2;
    }

    public void setPictureDescription2(String pictureDescription2) {
        this.pictureDescription2 = pictureDescription2;
    }

    public String getPicture3() { return picture3; }

    public void setPicture3(String picture3) {
        this.picture3 = picture3;
    }

    public String getPictureDescription3() {
        return pictureDescription3;
    }

    public void setPictureDescription3(String pictureDescription3) {
        this.pictureDescription3 = pictureDescription3;
    }

    public String getPicture4() { return picture4; }

    public void setPicture4(String picture4) {
        this.picture4 = picture4;
    }

    public String getPictureDescription4() {
        return pictureDescription4;
    }

    public void setPictureDescription4(String pictureDescription4) {
        this.pictureDescription4 = pictureDescription4;
    }

    public Boolean getIsEdited() {
        return isEdited;
    }

    public void setIsEdited(Boolean isEdited) {
        this.isEdited = isEdited;
    }

    public long getSaleExecutionId() {
        return saleExecutionId;
    }

    public void setSaleExecutionId(long saleExecutionId) {
        this.saleExecutionId = saleExecutionId;
    }

    /** To-one relationship, resolved on first access. */
    public SaleExecution getSaleExecution() {
        long __key = this.saleExecutionId;
        if (saleExecution__resolvedKey == null || !saleExecution__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleExecutionDao targetDao = daoSession.getSaleExecutionDao();
            SaleExecution saleExecutionNew = targetDao.load(__key);
            synchronized (this) {
                saleExecution = saleExecutionNew;
            	saleExecution__resolvedKey = __key;
            }
        }
        return saleExecution;
    }

    public void setSaleExecution(SaleExecution saleExecution) {
        if (saleExecution == null) {
            throw new DaoException("To-one property 'saleExecutionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saleExecution = saleExecution;
            saleExecutionId = saleExecution.getId();
            saleExecution__resolvedKey = saleExecutionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

	public String toJSONString() throws Exception {
		try {
			return this.toJSON().toString();
		} catch (Exception e) {
			throw e;
		}
	}

	public JSONObject toJSON() throws HolcimException {
		try {
			JSONObject jsonObj = new JSONObject();
			jsonObj.putOpt("salesforceId", this.salesforceId);
			jsonObj.putOpt("description", this.description);
			jsonObj.putOpt("status", this.status);
			jsonObj.putOpt("category", this.category);
			jsonObj.putOpt("complaint", this.complaint);
            jsonObj.putOpt("pictureDescription", this.pictureDescription);
            jsonObj.putOpt("pictureMD5", this.picture);
			jsonObj.putOpt("pictureDescription1", this.pictureDescription1);
			jsonObj.putOpt("picture1MD5", this.picture1);
            jsonObj.putOpt("pictureDescription2", this.pictureDescription2);
            jsonObj.putOpt("picture2MD5", this.picture2);
            jsonObj.putOpt("pictureDescription3", this.pictureDescription3);
            jsonObj.putOpt("picture3MD5", this.picture3);
            jsonObj.putOpt("pictureDescription4", this.pictureDescription4);
            jsonObj.putOpt("picture4MD5", this.picture4);
			//			jsonObj.putOpt("dateDeadline", this.dateDeadline);
			//			jsonObj.putOpt("dateEscalated", this.dateEscalated);
			//			jsonObj.putOpt("reasonBuyingLeadCompetitors", this.reasonBuyingLeadCompetitors);
			//			jsonObj.putOpt("competitorMarginHIL", this.competitorMarginHIL);
			//			jsonObj.putOpt("actionToBeTaken", this.actionToBeTaken);
			//			jsonObj.putOpt("commentCategory", this.commentCategory);
			//			jsonObj.putOpt("commentDate", this.commentDate);
			//			jsonObj.putOpt("commentType", this.commentType);
			//			jsonObj.putOpt("number1", this.number1);
			//			jsonObj.putOpt("PCIName", this.PCIName);
			//			jsonObj.putOpt("PCIPosition", this.PCIPosition);
			//			jsonObj.putOpt("reasonForPendingAction", this.reasonForPendingAction);
			//			jsonObj.putOpt("retailer", this.retailer);
			//			
			//			jsonObj.putOpt("retailerName", this.retailerName);
			//			jsonObj.putOpt("retailerSegmentation", this.retailerSegmentation);
			//			jsonObj.putOpt("retailerType", this.retailerType);
			//			jsonObj.putOpt("rootCauseAnalisys", this.rootCauseAnalisys);
			//			jsonObj.putOpt("streetAddress", this.streetAddress);
			//			jsonObj.putOpt("targetedOutcome", this.targetedOutcome);
			if (this.getSaleExecution() != null) {
				jsonObj.putOpt("saleExecution", this.getSaleExecution().getSalesforceId());
			}

			return jsonObj;
		} catch (JSONException e) {
			throw new HolcimException(HolcimException.PARSE_EXCEPTION, HolcimConsts.ERROR_PARSING_JSON_STATUS, e.getMessage());
		}
	}

	public boolean equals(ActionsLog object) {
		return this.compareTo(object) == 0;
	}

	public ActionsLog isContained(ArrayList<ActionsLog> actionsLogList) {
		for (ActionsLog actionsLog : actionsLogList) {
			if (this.equals(actionsLog)) {
				return actionsLog;
			}
		}
		return null;
	}

	public boolean checkPicturMD5(Context context, String field, int photoNumber) throws HolcimException {
		try {
			AltimetrikFileHandler fileHandler = new AltimetrikFileHandler(context);
            if(photoNumber == 0){
                return fileHandler.GetChecksum(getPicturePath(context, field, 0)).equals(this.getPicture());
            }
            else if(photoNumber == 1){
                return fileHandler.GetChecksum(getPicturePath(context, field, 1)).equals(this.getPicture1());
            }
			else if(photoNumber == 2){
                return fileHandler.GetChecksum(getPicturePath(context, field, 2)).equals(this.getPicture2());
            }
            else if(photoNumber == 3){
                return fileHandler.GetChecksum(getPicturePath(context, field, 3)).equals(this.getPicture3());
            }
            else if(photoNumber == 4){
                return fileHandler.GetChecksum(getPicturePath(context, field, 4)).equals(this.getPicture4());
            }
		} catch (AltimetrikException e) {
			throw new HolcimException(HolcimException.FILE_EXCEPTION, new HolcimError(HolcimConsts.FILE_ERROR_STATUS, e.getMessage()));
		} catch (HolcimException e) {
			throw e;
		}
        return false;
	}

	public String getTempActionLogPictureFilePath(Context context, Long actionLogId, int photoNumber) throws HolcimException {
		try {
			return HolcimDataSource.getTempMediaDirActionLog(context, actionLogId, photoNumber) + File.separator +
					HolcimConsts.ACTIONLOG_TEMPORAL_FILE_NAME_PART1 + actionLogId + "_" + photoNumber + HolcimConsts.ACTIONLOG_TEMPORAL_FILE_NAME_PART2;
		} catch (HolcimException e) {
			throw e;
		}
	}

	public boolean isActionLogPictureTempFileExist(Context context, Long actionLogId, int photoNumber) throws HolcimException {
		try {
			return AltimetrikFileHandler.isFileExist(getTempActionLogPictureFilePath(context, actionLogId, photoNumber));
		} catch (HolcimException e) {
			throw e;
		}
	}

	public String getPicturePath(Context context, String field, int photoNumber) throws HolcimException {
		try {
			return HolcimDataSource.GetActionLogImagePath(context, this, field, photoNumber);
		} catch (HolcimException e) {
			throw e;
		}
	}

	public boolean isPictureFileExist(Context context, String field, int photoNumber) throws HolcimException {
		try {
			return AltimetrikFileHandler.isFileExist(getPicturePath(context, field, photoNumber));
		} catch (HolcimException e) {
			throw e;
		}
	}

	public int isContainedPosition(ArrayList<ActionsLog> actionsLogList) {
		for (int i = 0; i < actionsLogList.size(); i++) {
			if (this.equals(actionsLogList.get(i))) {
				return i;
			}
		}
		return -1;
	}

	public String getTempActionLogPictureFileName(Context context, Long actionLogId, int photoNumber) {
		return HolcimConsts.ACTIONLOG_TEMPORAL_FILE_NAME_PART1  + actionLogId + "_" + photoNumber + HolcimConsts.ACTIONLOG_TEMPORAL_FILE_NAME_PART2;
	}

	public String getPictureFileName(int photoNumber) {
		return this.getId().toString() + "_" + HolcimConsts.ACTIONLOG_PICTURE_FILENAME + "_" + photoNumber + ".jpg";
	}

	public String getActionLogPicturePath(Context context, String field, int photoNumber) throws HolcimException {
		try {
			return HolcimDataSource.GetActionLogImagePath(context, this, field, photoNumber);
		} catch (HolcimException e) {
			throw e;
		}
	}

	public boolean needDownloadPicture(Context context) throws HolcimException {
		try {
			if (this.getPicture() != null && !this.getPicture().equals("") && (!isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_FIELD_NAME, 0) || !checkPicturMD5(context, HolcimConsts.ACTIONLOG_SF_IMAGE_FIELD_NAME, 0) )  ) {
					return true;
			}
			return false;
		} catch (Exception e) {
			throw new HolcimException(HolcimException.FILE_EXCEPTION, new HolcimError(HolcimConsts.FILE_ERROR_STATUS, e.getMessage()));
		}
	}

    public boolean needDownloadPicture1(Context context) throws HolcimException {
        try {
            if (this.getPicture1() != null && !this.getPicture1().equals("") && (!isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_1_FIELD_NAME, 1) || !checkPicturMD5(context, HolcimConsts.ACTIONLOG_SF_IMAGE_1_FIELD_NAME, 1) ) ) {
                return true;
            }
            return false;
        } catch (Exception e) {
            throw new HolcimException(HolcimException.FILE_EXCEPTION, new HolcimError(HolcimConsts.FILE_ERROR_STATUS, e.getMessage()));
        }
    }

    public boolean needDownloadPicture2(Context context) throws HolcimException {
        try {
            if (this.getPicture2() != null && !this.getPicture2().equals("") && (!isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_2_FIELD_NAME, 2) || !checkPicturMD5(context, HolcimConsts.ACTIONLOG_SF_IMAGE_2_FIELD_NAME, 2) ) ) {
                return true;
            }
            return false;
        } catch (Exception e) {
            throw new HolcimException(HolcimException.FILE_EXCEPTION, new HolcimError(HolcimConsts.FILE_ERROR_STATUS, e.getMessage()));
        }
    }

    public boolean needDownloadPicture3(Context context) throws HolcimException {
        try {
            if (this.getPicture3() != null && !this.getPicture3().equals("") && (!isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_3_FIELD_NAME, 3) || !checkPicturMD5(context, HolcimConsts.ACTIONLOG_SF_IMAGE_3_FIELD_NAME, 3) ) ) {
                return true;
            }
            return false;
        } catch (Exception e) {
            throw new HolcimException(HolcimException.FILE_EXCEPTION, new HolcimError(HolcimConsts.FILE_ERROR_STATUS, e.getMessage()));
        }
    }

    public boolean needDownloadPicture4(Context context) throws HolcimException {
        try {
            if (this.getPicture4() != null && !this.getPicture4().equals("") && (!isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_4_FIELD_NAME, 4) || !checkPicturMD5(context, HolcimConsts.ACTIONLOG_SF_IMAGE_4_FIELD_NAME, 4) ) ) {
                return true;
            }
            return false;
        } catch (Exception e) {
            throw new HolcimException(HolcimException.FILE_EXCEPTION, new HolcimError(HolcimConsts.FILE_ERROR_STATUS, e.getMessage()));
        }
    }

	public boolean needUploadPicture(Context context) throws HolcimException {
		try {
			if ((this.getSalesforceId() == null || this.getSalesforceId().equals("")) && (isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_FIELD_NAME, 0)) ) {
				return true;
			} else if (this.getIsEdited() && ( ( isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_FIELD_NAME, 0) && !checkPicturMD5(context, HolcimConsts.ACTIONLOG_SF_IMAGE_FIELD_NAME, 0) ) ) ) {
				return true;
			}
			return false;
		} catch (HolcimException e) {
			throw e;
		}
	}

    public boolean needUploadPicture1(Context context) throws HolcimException {
        try {
            if ((this.getSalesforceId() == null || this.getSalesforceId().equals("")) && (isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_1_FIELD_NAME, 1)) ) {
                return true;
            } else if (this.getIsEdited() && ( ( isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_1_FIELD_NAME, 1) && !checkPicturMD5(context, HolcimConsts.ACTIONLOG_SF_IMAGE_1_FIELD_NAME, 1) ) ) ) {
                return true;
            }
            return false;
        } catch (HolcimException e) {
            throw e;
        }
    }

    public boolean needUploadPicture2(Context context) throws HolcimException {
        try {
            if ((this.getSalesforceId() == null || this.getSalesforceId().equals("")) && (isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_2_FIELD_NAME, 2)) ) {
                return true;
            } else if (this.getIsEdited() && ( ( isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_2_FIELD_NAME, 2) && !checkPicturMD5(context, HolcimConsts.ACTIONLOG_SF_IMAGE_2_FIELD_NAME, 2) ) ) ) {
                return true;
            }
            return false;
        } catch (HolcimException e) {
            throw e;
        }
    }

    public boolean needUploadPicture3(Context context) throws HolcimException {
        try {
            if ((this.getSalesforceId() == null || this.getSalesforceId().equals("")) && (isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_3_FIELD_NAME, 3)) ) {
                return true;
            } else if (this.getIsEdited() && ( ( isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_3_FIELD_NAME, 3) && !checkPicturMD5(context, HolcimConsts.ACTIONLOG_SF_IMAGE_3_FIELD_NAME, 3) ) ) ) {
                return true;
            }
            return false;
        } catch (HolcimException e) {
            throw e;
        }
    }

    public boolean needUploadPicture4(Context context) throws HolcimException {
        try {
            if ((this.getSalesforceId() == null || this.getSalesforceId().equals("")) && (isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_4_FIELD_NAME, 4)) ) {
                return true;
            } else if (this.getIsEdited() && ( ( isPictureFileExist(context, HolcimConsts.ACTIONLOG_SF_IMAGE_4_FIELD_NAME, 4) && !checkPicturMD5(context, HolcimConsts.ACTIONLOG_SF_IMAGE_4_FIELD_NAME, 4) ) ) ) {
                return true;
            }
            return false;
        } catch (HolcimException e) {
            throw e;
        }
    }

	public String getImagePath(Context context, String field, int photoNumber) throws HolcimException {
		try {
			String ret = null;
			if (field.equals(HolcimConsts.ACTIONLOG_SF_IMAGE_FIELD_NAME) || field.equals(HolcimConsts.ACTIONLOG_SF_IMAGE_1_FIELD_NAME) || field.equals(HolcimConsts.ACTIONLOG_SF_IMAGE_2_FIELD_NAME) || field.equals(HolcimConsts.ACTIONLOG_SF_IMAGE_3_FIELD_NAME) || field.equals(HolcimConsts.ACTIONLOG_SF_IMAGE_4_FIELD_NAME)) {
				ret = getActionLogPicturePath(context, field, photoNumber);
			}
			return ret;
		} catch (HolcimException e) {
			throw e;
		}
	}

	@Override
	public int compareTo(ActionsLog another) {
		if (this.getComplaint() == another.getComplaint() && 
				this.getCategory().equals(another.getCategory()) && 
				this.getDescription().equals(another.getDescription()) && 
				this.getStatus().equals(another.getStatus()) && 
				this.getId() == another.getId()) {
			return 0;
		}
		return -1;
	}
    // KEEP METHODS END

}
